
DIO_Boody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00003cea  00003d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080009a  0080009a  00003db8  2**0
                  ALLOC
  3 .stab         00003e34  00000000  00000000  00003db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001589  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009175  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000092b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009425  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b06e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ce68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d8c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <main>
      8a:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <M_TIMER0_void_Timer0Int>:
u32 MTimer0_u32NumOfCM =0;
void (*CallBack)(void);
///***************** FUNCTIONS **********//
/// M_TIMER0_void_Timer0Int is a function to initialize Timer0///
void M_TIMER0_void_Timer0Int(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   /// To enable TIMER0 overflow INT
   // Set TOIEO in TIMSK_REG
	  SetBit(TIMSK_REG , TOIE0);
#elif TIMER0_MODE == CTC_MODE
	  /// To Enable CTC_MODE clear WGM00 and  set WGM01 in TCCR0_REG
	  	  ClrBit(TCCR0_REG ,WGM00 );
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24
	  	  SetBit(TCCR0_REG ,WGM01 );
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	  /// To enable TIMER0 compare match INT
	   // Set OCIE0 in TIMSK_REG
	  	 SetBit(TIMSK_REG , OCIE0);
     b6a:	a9 e5       	ldi	r26, 0x59	; 89
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e9 e5       	ldi	r30, 0x59	; 89
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	82 60       	ori	r24, 0x02	; 2
     b76:	8c 93       	st	X, r24
#endif //// end if for  TIMER0_MODE

}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <M_TIMER0_U8_Timer0SetTime>:
///M_TIMER0_U8_Timer0SetTime function to set time
void M_TIMER0_U8_Timer0SetTime(u32 Loacl_u8DesierdTime_ms)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	2d 97       	sbiw	r28, 0x0d	; 13
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	6a 87       	std	Y+10, r22	; 0x0a
     b94:	7b 87       	std	Y+11, r23	; 0x0b
     b96:	8c 87       	std	Y+12, r24	; 0x0c
     b98:	9d 87       	std	Y+13, r25	; 0x0d

	/// time of the tick  time
    u32 Local_u32TickTime = TIMER0_PRESCALER / FOSC ;  /// results will be in micro sec
     b9a:	80 e4       	ldi	r24, 0x40	; 64
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	8e 83       	std	Y+6, r24	; 0x06
     ba4:	9f 83       	std	Y+7, r25	; 0x07
     ba6:	a8 87       	std	Y+8, r26	; 0x08
     ba8:	b9 87       	std	Y+9, r27	; 0x09
    /// the number of the total ticks
    u32 Local_u32TotalTicks =  (Loacl_u8DesierdTime_ms *1000) / Local_u32TickTime;
     baa:	8a 85       	ldd	r24, Y+10	; 0x0a
     bac:	9b 85       	ldd	r25, Y+11	; 0x0b
     bae:	ac 85       	ldd	r26, Y+12	; 0x0c
     bb0:	bd 85       	ldd	r27, Y+13	; 0x0d
     bb2:	28 ee       	ldi	r18, 0xE8	; 232
     bb4:	33 e0       	ldi	r19, 0x03	; 3
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__mulsi3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	2e 81       	ldd	r18, Y+6	; 0x06
     bc8:	3f 81       	ldd	r19, Y+7	; 0x07
     bca:	48 85       	ldd	r20, Y+8	; 0x08
     bcc:	59 85       	ldd	r21, Y+9	; 0x09
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8a 83       	std	Y+2, r24	; 0x02
     bdc:	9b 83       	std	Y+3, r25	; 0x03
     bde:	ac 83       	std	Y+4, r26	; 0x04
     be0:	bd 83       	std	Y+5, r27	; 0x05
    	 //// TCNT0_REG will start from the reminded ticks number
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	03 c0       	rjmp	.+6      	; 0xbee <M_TIMER0_U8_Timer0SetTime+0x70>
     while(Local_u32TotalTicks % Local_8uCounter)
     {
    	 Local_8uCounter--;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	89 83       	std	Y+1, r24	; 0x01
    	 TCNT0_REG = 256 - MTimer0_u8RemTicks;
    	 MTimer0_u32NumOfOV++;
     }
#elif TIMER0_MODE == CTC_MODE
     u8 Local_8uCounter = 255;
     while(Local_u32TotalTicks % Local_8uCounter)
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	9b 81       	ldd	r25, Y+3	; 0x03
     bfc:	ac 81       	ldd	r26, Y+4	; 0x04
     bfe:	bd 81       	ldd	r27, Y+5	; 0x05
     c00:	bc 01       	movw	r22, r24
     c02:	cd 01       	movw	r24, r26
     c04:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	51 f7       	brne	.-44     	; 0xbe8 <M_TIMER0_U8_Timer0SetTime+0x6a>
     {
    	 Local_8uCounter--;
     }
     MTimer0_u32NumOfCM = Local_u32TotalTicks /Local_8uCounter ;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	ac 81       	ldd	r26, Y+4	; 0x04
     c24:	bd 81       	ldd	r27, Y+5	; 0x05
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
     c2e:	da 01       	movw	r26, r20
     c30:	c9 01       	movw	r24, r18
     c32:	80 93 9f 00 	sts	0x009F, r24
     c36:	90 93 a0 00 	sts	0x00A0, r25
     c3a:	a0 93 a1 00 	sts	0x00A1, r26
     c3e:	b0 93 a2 00 	sts	0x00A2, r27
     OCR0_REG = Local_8uCounter - 1;
     c42:	ec e5       	ldi	r30, 0x5C	; 92
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	81 50       	subi	r24, 0x01	; 1
     c4a:	80 83       	st	Z, r24

#endif
}
     c4c:	2d 96       	adiw	r28, 0x0d	; 13
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <M_TIMER0_void_Timer0Start>:
/// M_TIMER0_void_Timer0Start to let Timer0 start

void M_TIMER0_void_Timer0Start(void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/// Selecting prescaler
#if  TIMER0_PRESCALER == 1024       /// 1024 mode
	 /// set   CS00 in TCCR0_REG
	    SetBit(TCCR0_REG , CS00);
     c66:	a3 e5       	ldi	r26, 0x53	; 83
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e3 e5       	ldi	r30, 0x53	; 83
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	8c 93       	st	X, r24
     /// clear CS01 in TCCR0_REG
        ClrBit(TCCR0_REG , CS01);
     c74:	a3 e5       	ldi	r26, 0x53	; 83
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e3 e5       	ldi	r30, 0x53	; 83
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8d 7f       	andi	r24, 0xFD	; 253
     c80:	8c 93       	st	X, r24
     /// set   CS02 in TCCR0_REG
        SetBit(TCCR0_REG , CS02);
     c82:	a3 e5       	ldi	r26, 0x53	; 83
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e3 e5       	ldi	r30, 0x53	; 83
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	8c 93       	st	X, r24
        SetBit(TCCR0_REG , CS01);
	/// clear CS00 in TCCR0_REG
        ClrBit(TCCR0_REG , CS00);
#endif //// end if for  PRESCALER

}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <M_TIMER0_void_Timer0Stop>:
///M_TIMER0_void_Timer0Stop to let Timer0 stop
void M_TIMER0_void_Timer0Stop(void)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	///clear the three bits (CS00 , CS01 ,CS02 )
	ClrBit(TCCR0_REG , CS00);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8e 7f       	andi	r24, 0xFE	; 254
     caa:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS01);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	8c 93       	st	X, r24
	ClrBit(TCCR0_REG , CS02);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8b 7f       	andi	r24, 0xFB	; 251
     cc6:	8c 93       	st	X, r24
}
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <M_TIMER0_void_Timer0SetCallBack>:
/// M_TIMER0_void_Timer0SetCallBack to set callback function
void M_TIMER0_void_Timer0SetCallBack(void (*Local_Ptr)(void))
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <M_TIMER0_void_Timer0SetCallBack+0x6>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	9a 83       	std	Y+2, r25	; 0x02
     cda:	89 83       	std	Y+1, r24	; 0x01
	CallBack = Local_Ptr;
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	90 93 aa 00 	sts	0x00AA, r25
     ce4:	80 93 a9 00 	sts	0x00A9, r24

}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <__vector_10>:
}

#elif TIMER0_MODE == CTC_MODE

ISR(TIMER0_COMP_vect)
{
     cf2:	1f 92       	push	r1
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	0f 92       	push	r0
     cfa:	11 24       	eor	r1, r1
     cfc:	2f 93       	push	r18
     cfe:	3f 93       	push	r19
     d00:	4f 93       	push	r20
     d02:	5f 93       	push	r21
     d04:	6f 93       	push	r22
     d06:	7f 93       	push	r23
     d08:	8f 93       	push	r24
     d0a:	9f 93       	push	r25
     d0c:	af 93       	push	r26
     d0e:	bf 93       	push	r27
     d10:	ef 93       	push	r30
     d12:	ff 93       	push	r31
     d14:	df 93       	push	r29
     d16:	cf 93       	push	r28
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Conter =0;
	    Local_u32Conter ++;
     d1c:	80 91 a3 00 	lds	r24, 0x00A3
     d20:	90 91 a4 00 	lds	r25, 0x00A4
     d24:	a0 91 a5 00 	lds	r26, 0x00A5
     d28:	b0 91 a6 00 	lds	r27, 0x00A6
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	a1 1d       	adc	r26, r1
     d30:	b1 1d       	adc	r27, r1
     d32:	80 93 a3 00 	sts	0x00A3, r24
     d36:	90 93 a4 00 	sts	0x00A4, r25
     d3a:	a0 93 a5 00 	sts	0x00A5, r26
     d3e:	b0 93 a6 00 	sts	0x00A6, r27
	  if(Local_u32Conter ==  MTimer0_u32NumOfCM)
     d42:	20 91 a3 00 	lds	r18, 0x00A3
     d46:	30 91 a4 00 	lds	r19, 0x00A4
     d4a:	40 91 a5 00 	lds	r20, 0x00A5
     d4e:	50 91 a6 00 	lds	r21, 0x00A6
     d52:	80 91 9f 00 	lds	r24, 0x009F
     d56:	90 91 a0 00 	lds	r25, 0x00A0
     d5a:	a0 91 a1 00 	lds	r26, 0x00A1
     d5e:	b0 91 a2 00 	lds	r27, 0x00A2
     d62:	28 17       	cp	r18, r24
     d64:	39 07       	cpc	r19, r25
     d66:	4a 07       	cpc	r20, r26
     d68:	5b 07       	cpc	r21, r27
     d6a:	69 f4       	brne	.+26     	; 0xd86 <__vector_10+0x94>
	  {
           CallBack();
     d6c:	e0 91 a9 00 	lds	r30, 0x00A9
     d70:	f0 91 aa 00 	lds	r31, 0x00AA
     d74:	09 95       	icall
		  Local_u32Conter =0;
     d76:	10 92 a3 00 	sts	0x00A3, r1
     d7a:	10 92 a4 00 	sts	0x00A4, r1
     d7e:	10 92 a5 00 	sts	0x00A5, r1
     d82:	10 92 a6 00 	sts	0x00A6, r1
	  }
}
     d86:	cf 91       	pop	r28
     d88:	df 91       	pop	r29
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	7f 91       	pop	r23
     d98:	6f 91       	pop	r22
     d9a:	5f 91       	pop	r21
     d9c:	4f 91       	pop	r20
     d9e:	3f 91       	pop	r19
     da0:	2f 91       	pop	r18
     da2:	0f 90       	pop	r0
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	0f 90       	pop	r0
     da8:	1f 90       	pop	r1
     daa:	18 95       	reti

00000dac <M_GIE_void_GIE_EN>:
#include "GIE_Int.h"

/// *************** Functions  ************//
/// M_GIE_void_GIEEn function to Enable general interrupt
void M_GIE_void_GIE_EN (void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
	///set I_BIT in SREG_REG
	SetBit(SREG_REG,I_BIT);
     db4:	af e5       	ldi	r26, 0x5F	; 95
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	ef e5       	ldi	r30, 0x5F	; 95
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	8c 93       	st	X, r24
}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <M_GIE_void_GIE_DIS>:
/// M_GIE_void_GIEDIS function to Disable general interrupt
void M_GIE_void_GIE_DIS (void)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	///clear I_BIT in SREG_REG
	ClrBit(SREG_REG,I_BIT);
     dd0:	af e5       	ldi	r26, 0x5F	; 95
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ef e5       	ldi	r30, 0x5F	; 95
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8f 77       	andi	r24, 0x7F	; 127
     ddc:	8c 93       	st	X, r24
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <M_EXTI_IN0_void_EXTI_INT0EN>:

void (*EXTI_INT0_CallBack)(void);
/// **************Functions********//
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Enable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0EN(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
    ///Enable internal interrupt for INT0
        SetBit(GICR_REG,INT0);
     dec:	ab e5       	ldi	r26, 0x5B	; 91
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e5       	ldi	r30, 0x5B	; 91
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 64       	ori	r24, 0x40	; 64
     df8:	8c 93       	st	X, r24
////  Interrupt 0 (INT0) Sense Control
/// Interrupt Request on Falling_Edge
#if SENSE_CONTROL   == Falling_Edge
	/// Set bit ISC01  on MCUCR_REG
	SetBit(MCUCR_REG ,ISC01);
     dfa:	a5 e5       	ldi	r26, 0x55	; 85
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e5       	ldi	r30, 0x55	; 85
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
     e08:	a5 e5       	ldi	r26, 0x55	; 85
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e5 e5       	ldi	r30, 0x55	; 85
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8e 7f       	andi	r24, 0xFE	; 254
     e14:	8c 93       	st	X, r24
	/// Set bit ISC01  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC01);
	/// Clear bit ISC00  on MCUCR_REG
	ClrBit(MCUCR_REG ,ISC00);
#endif
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <M_EXTI_IN0_void_EXTI_INT0DIS>:
///************** M_EXTI_IN0_void_EXTI_INT0EN Function to Disable INT0 ********//
void M_EXTI_IN0_void_EXTI_INT0DIS()
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	///Disable internal interrupt
	    ClrBit(GICR_REG,INT0);
     e24:	ab e5       	ldi	r26, 0x5B	; 91
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	eb e5       	ldi	r30, 0x5B	; 91
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8f 7b       	andi	r24, 0xBF	; 191
     e30:	8c 93       	st	X, r24
}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <M_EXTI_INT0_void_Set_CallBack>:
///************** M_EXTI_INT0_void_Set_CallBack Function ********//
void M_EXTI_INT0_void_Set_CallBack (void (*local_ptr)(void))
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <M_EXTI_INT0_void_Set_CallBack+0x6>
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
	EXTI_INT0_CallBack = local_ptr;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	90 93 ac 00 	sts	0x00AC, r25
     e4e:	80 93 ab 00 	sts	0x00AB, r24

}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <__vector_1>:

ISR(INT0_vect)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	EXTI_INT0_CallBack();
     e86:	e0 91 ab 00 	lds	r30, 0x00AB
     e8a:	f0 91 ac 00 	lds	r31, 0x00AC
     e8e:	09 95       	icall
}
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	ff 91       	pop	r31
     e96:	ef 91       	pop	r30
     e98:	bf 91       	pop	r27
     e9a:	af 91       	pop	r26
     e9c:	9f 91       	pop	r25
     e9e:	8f 91       	pop	r24
     ea0:	7f 91       	pop	r23
     ea2:	6f 91       	pop	r22
     ea4:	5f 91       	pop	r21
     ea6:	4f 91       	pop	r20
     ea8:	3f 91       	pop	r19
     eaa:	2f 91       	pop	r18
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <M_DIO_void_SetPinDirection>:
 */
#include "DIO_Int.h"

///  M_DIO_void_SetPinDirection takes 3 arguments PORT , PIN & DIRECTION
void M_DIO_void_SetPinDirection (u8 port , u8 pin , u8 direction)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	29 97       	sbiw	r28, 0x09	; 9
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
     ece:	4b 83       	std	Y+3, r20	; 0x03
	//// SWITCH too determine the Direction of Pin
	switch (direction)
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	39 87       	std	Y+9, r19	; 0x09
     ed8:	28 87       	std	Y+8, r18	; 0x08
     eda:	88 85       	ldd	r24, Y+8	; 0x08
     edc:	99 85       	ldd	r25, Y+9	; 0x09
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	39 f0       	breq	.+14     	; 0xef0 <M_DIO_void_SetPinDirection+0x3a>
     ee2:	28 85       	ldd	r18, Y+8	; 0x08
     ee4:	39 85       	ldd	r19, Y+9	; 0x09
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <M_DIO_void_SetPinDirection+0x38>
     eec:	76 c0       	rjmp	.+236    	; 0xfda <M_DIO_void_SetPinDirection+0x124>
     eee:	e4 c0       	rjmp	.+456    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
		{
	 /// case  INPUT means that the Direction of Pin  = 0
		 case INPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3f 83       	std	Y+7, r19	; 0x07
     ef8:	2e 83       	std	Y+6, r18	; 0x06
     efa:	8e 81       	ldd	r24, Y+6	; 0x06
     efc:	9f 81       	ldd	r25, Y+7	; 0x07
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	91 05       	cpc	r25, r1
     f02:	61 f1       	breq	.+88     	; 0xf5c <M_DIO_void_SetPinDirection+0xa6>
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	23 30       	cpi	r18, 0x03	; 3
     f0a:	31 05       	cpc	r19, r1
     f0c:	34 f4       	brge	.+12     	; 0xf1a <M_DIO_void_SetPinDirection+0x64>
     f0e:	8e 81       	ldd	r24, Y+6	; 0x06
     f10:	9f 81       	ldd	r25, Y+7	; 0x07
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	69 f0       	breq	.+26     	; 0xf32 <M_DIO_void_SetPinDirection+0x7c>
     f18:	cf c0       	rjmp	.+414    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
     f1a:	2e 81       	ldd	r18, Y+6	; 0x06
     f1c:	3f 81       	ldd	r19, Y+7	; 0x07
     f1e:	23 30       	cpi	r18, 0x03	; 3
     f20:	31 05       	cpc	r19, r1
     f22:	89 f1       	breq	.+98     	; 0xf86 <M_DIO_void_SetPinDirection+0xd0>
     f24:	8e 81       	ldd	r24, Y+6	; 0x06
     f26:	9f 81       	ldd	r25, Y+7	; 0x07
     f28:	84 30       	cpi	r24, 0x04	; 4
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <M_DIO_void_SetPinDirection+0x7a>
     f2e:	40 c0       	rjmp	.+128    	; 0xfb0 <M_DIO_void_SetPinDirection+0xfa>
     f30:	c3 c0       	rjmp	.+390    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                        /// Port A
			 		ClrBit(DDRA,pin);                  /// clear pin value set it to 0
     f32:	aa e3       	ldi	r26, 0x3A	; 58
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ea e3       	ldi	r30, 0x3A	; 58
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <M_DIO_void_SetPinDirection+0x9a>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <M_DIO_void_SetPinDirection+0x96>
     f54:	80 95       	com	r24
     f56:	84 23       	and	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	ae c0       	rjmp	.+348    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
				break ;
			 	case PORTB_ID :                        /// Port B
			 		ClrBit(DDRB,pin);                 /// clear pin value set it to 0
     f5c:	a7 e3       	ldi	r26, 0x37	; 55
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e7 e3       	ldi	r30, 0x37	; 55
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <M_DIO_void_SetPinDirection+0xc4>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <M_DIO_void_SetPinDirection+0xc0>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	99 c0       	rjmp	.+306    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTC_ID :                       /// Port C
			 		ClrBit(DDRC,pin);                /// clear pin value set it to 0
     f86:	a4 e3       	ldi	r26, 0x34	; 52
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e4 e3       	ldi	r30, 0x34	; 52
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <M_DIO_void_SetPinDirection+0xee>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <M_DIO_void_SetPinDirection+0xea>
     fa8:	80 95       	com	r24
     faa:	84 23       	and	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	84 c0       	rjmp	.+264    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	break ;
			 	case PORTD_ID :                       /// Port D
			 		ClrBit(DDRD,pin);                /// clear pin value set it to 0
     fb0:	a1 e3       	ldi	r26, 0x31	; 49
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e1 e3       	ldi	r30, 0x31	; 49
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <M_DIO_void_SetPinDirection+0x118>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <M_DIO_void_SetPinDirection+0x114>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	6f c0       	rjmp	.+222    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
		break;        /////// break case INPUT

		/// case  INPUT means that the Direction of Pin = 1
		 case OUTPUT :
			 //// SWITCH too determine the Port of the Pin
			 switch (port)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3d 83       	std	Y+5, r19	; 0x05
     fe2:	2c 83       	std	Y+4, r18	; 0x04
     fe4:	8c 81       	ldd	r24, Y+4	; 0x04
     fe6:	9d 81       	ldd	r25, Y+5	; 0x05
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	91 05       	cpc	r25, r1
     fec:	51 f1       	breq	.+84     	; 0x1042 <M_DIO_void_SetPinDirection+0x18c>
     fee:	2c 81       	ldd	r18, Y+4	; 0x04
     ff0:	3d 81       	ldd	r19, Y+5	; 0x05
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	31 05       	cpc	r19, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <M_DIO_void_SetPinDirection+0x14e>
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	61 f0       	breq	.+24     	; 0x101a <M_DIO_void_SetPinDirection+0x164>
    1002:	5a c0       	rjmp	.+180    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
    1004:	2c 81       	ldd	r18, Y+4	; 0x04
    1006:	3d 81       	ldd	r19, Y+5	; 0x05
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <M_DIO_void_SetPinDirection+0x1b4>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	91 05       	cpc	r25, r1
    1016:	e9 f1       	breq	.+122    	; 0x1092 <M_DIO_void_SetPinDirection+0x1dc>
    1018:	4f c0       	rjmp	.+158    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	{
			 	case PORTA_ID :                   /// Port A
			 		SetBit(DDRA,pin);             /// SET pin value set it to 1
    101a:	aa e3       	ldi	r26, 0x3A	; 58
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ea e3       	ldi	r30, 0x3A	; 58
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <M_DIO_void_SetPinDirection+0x182>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <M_DIO_void_SetPinDirection+0x17e>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	3b c0       	rjmp	.+118    	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTA_ID

			 	case PORTB_ID :                  /// Port B
			 		SetBit(DDRB,pin);           /// SET pin value set it to 1
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <M_DIO_void_SetPinDirection+0x1aa>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <M_DIO_void_SetPinDirection+0x1a6>
    1064:	84 2b       	or	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	27 c0       	rjmp	.+78     	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	break ;       /////// break case PORTB_ID

			 	case PORTC_ID :                  /// Port C
			 		SetBit(DDRC,pin);            /// SET pin value set it to 1
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <M_DIO_void_SetPinDirection+0x1d2>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <M_DIO_void_SetPinDirection+0x1ce>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	13 c0       	rjmp	.+38     	; 0x10b8 <M_DIO_void_SetPinDirection+0x202>
			 	break ;        /////// break case PORTC_ID

			 	case PORTD_ID :                  /// Port D
			 		SetBit(DDRD,pin);           /// SET pin value set it to 1
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <M_DIO_void_SetPinDirection+0x1fa>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <M_DIO_void_SetPinDirection+0x1f6>
    10b4:	84 2b       	or	r24, r20
    10b6:	8c 93       	st	X, r24

		 default:       /*  Do nothing */        break;
		       ///* default of switch (direction) */
		}

}
    10b8:	29 96       	adiw	r28, 0x09	; 9
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <M_DIO_void_SetPinValue>:



void M_DIO_void_SetPinValue(u8 port , u8 pin , u8 value)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	29 97       	sbiw	r28, 0x09	; 9
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	  /// SWITCH too determine the Value of the Pin
		switch (value)
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	39 87       	std	Y+9, r19	; 0x09
    10ec:	28 87       	std	Y+8, r18	; 0x08
    10ee:	88 85       	ldd	r24, Y+8	; 0x08
    10f0:	99 85       	ldd	r25, Y+9	; 0x09
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	39 f0       	breq	.+14     	; 0x1104 <M_DIO_void_SetPinValue+0x3a>
    10f6:	28 85       	ldd	r18, Y+8	; 0x08
    10f8:	39 85       	ldd	r19, Y+9	; 0x09
    10fa:	21 30       	cpi	r18, 0x01	; 1
    10fc:	31 05       	cpc	r19, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <M_DIO_void_SetPinValue+0x38>
    1100:	76 c0       	rjmp	.+236    	; 0x11ee <M_DIO_void_SetPinValue+0x124>
    1102:	e4 c0       	rjmp	.+456    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
		{
		   /// case  LOW means that the Value of Pin = 0
          case LOW :
        	  //// SWITCH too determine the Port of the Pin
			       switch (port)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3f 83       	std	Y+7, r19	; 0x07
    110c:	2e 83       	std	Y+6, r18	; 0x06
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	9f 81       	ldd	r25, Y+7	; 0x07
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	61 f1       	breq	.+88     	; 0x1170 <M_DIO_void_SetPinValue+0xa6>
    1118:	2e 81       	ldd	r18, Y+6	; 0x06
    111a:	3f 81       	ldd	r19, Y+7	; 0x07
    111c:	23 30       	cpi	r18, 0x03	; 3
    111e:	31 05       	cpc	r19, r1
    1120:	34 f4       	brge	.+12     	; 0x112e <M_DIO_void_SetPinValue+0x64>
    1122:	8e 81       	ldd	r24, Y+6	; 0x06
    1124:	9f 81       	ldd	r25, Y+7	; 0x07
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	91 05       	cpc	r25, r1
    112a:	69 f0       	breq	.+26     	; 0x1146 <M_DIO_void_SetPinValue+0x7c>
    112c:	cf c0       	rjmp	.+414    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
    112e:	2e 81       	ldd	r18, Y+6	; 0x06
    1130:	3f 81       	ldd	r19, Y+7	; 0x07
    1132:	23 30       	cpi	r18, 0x03	; 3
    1134:	31 05       	cpc	r19, r1
    1136:	89 f1       	breq	.+98     	; 0x119a <M_DIO_void_SetPinValue+0xd0>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	91 05       	cpc	r25, r1
    1140:	09 f4       	brne	.+2      	; 0x1144 <M_DIO_void_SetPinValue+0x7a>
    1142:	40 c0       	rjmp	.+128    	; 0x11c4 <M_DIO_void_SetPinValue+0xfa>
    1144:	c3 c0       	rjmp	.+390    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			       	{
			       	case PORTA_ID :                  /// Port A
			       		ClrBit(PORTA,pin);          ///  clear pin value set it to 0
    1146:	ab e3       	ldi	r26, 0x3B	; 59
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	eb e3       	ldi	r30, 0x3B	; 59
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <M_DIO_void_SetPinValue+0x9a>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <M_DIO_void_SetPinValue+0x96>
    1168:	80 95       	com	r24
    116a:	84 23       	and	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	ae c0       	rjmp	.+348    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			       	break ;             /////// break case PORTA_ID

			       	case PORTB_ID :                 /// Port B
			       		ClrBit(PORTB,pin);          /// clear pin value set it to 0
    1170:	a8 e3       	ldi	r26, 0x38	; 56
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e8 e3       	ldi	r30, 0x38	; 56
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <M_DIO_void_SetPinValue+0xc4>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <M_DIO_void_SetPinValue+0xc0>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	99 c0       	rjmp	.+306    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			       	break ;          /////// break case PORTB_ID

			       	case PORTC_ID :                 /// Port C
			       		ClrBit(PORTC,pin);          /// clear pin value set it to 0
    119a:	a5 e3       	ldi	r26, 0x35	; 53
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <M_DIO_void_SetPinValue+0xee>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <M_DIO_void_SetPinValue+0xea>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	84 c0       	rjmp	.+264    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			       	break ;         /////// break case PORTC_ID

			       	case PORTD_ID :                 /// Port D
			       		ClrBit(PORTD,pin);         /// clear pin value set it to 0
    11c4:	a2 e3       	ldi	r26, 0x32	; 50
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e2 e3       	ldi	r30, 0x32	; 50
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <M_DIO_void_SetPinValue+0x118>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <M_DIO_void_SetPinValue+0x114>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	6f c0       	rjmp	.+222    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
		 break;   /////// break case LOW

		 /// case  HIGH means that the Value of Pin = 1
		 case HIGH :
			 //// SWITCH too determine the Port of the Pin
			        switch (port)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	51 f1       	breq	.+84     	; 0x1256 <M_DIO_void_SetPinValue+0x18c>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	23 30       	cpi	r18, 0x03	; 3
    1208:	31 05       	cpc	r19, r1
    120a:	34 f4       	brge	.+12     	; 0x1218 <M_DIO_void_SetPinValue+0x14e>
    120c:	8c 81       	ldd	r24, Y+4	; 0x04
    120e:	9d 81       	ldd	r25, Y+5	; 0x05
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	61 f0       	breq	.+24     	; 0x122e <M_DIO_void_SetPinValue+0x164>
    1216:	5a c0       	rjmp	.+180    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	23 30       	cpi	r18, 0x03	; 3
    121e:	31 05       	cpc	r19, r1
    1220:	71 f1       	breq	.+92     	; 0x127e <M_DIO_void_SetPinValue+0x1b4>
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	91 05       	cpc	r25, r1
    122a:	e9 f1       	breq	.+122    	; 0x12a6 <M_DIO_void_SetPinValue+0x1dc>
    122c:	4f c0       	rjmp	.+158    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			        	{
			        	case PORTA_ID :                /// Port A
			        		SetBit(PORTA,pin);         /// SET pin value set it to 1
    122e:	ab e3       	ldi	r26, 0x3B	; 59
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e3       	ldi	r30, 0x3B	; 59
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <M_DIO_void_SetPinValue+0x182>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <M_DIO_void_SetPinValue+0x17e>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	3b c0       	rjmp	.+118    	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			        	break ;             /////// break case PORTA_ID

			        	case PORTB_ID :                 /// Port B
			        		SetBit(PORTB,pin);         /// SET pin value set it to 1
    1256:	a8 e3       	ldi	r26, 0x38	; 56
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <M_DIO_void_SetPinValue+0x1aa>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <M_DIO_void_SetPinValue+0x1a6>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			        	break ;          /////// break case PORTB_ID

			        	case PORTC_ID :                /// Port C
			        		SetBit(PORTC,pin);        /// SET pin value set it to 1
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <M_DIO_void_SetPinValue+0x1d2>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <M_DIO_void_SetPinValue+0x1ce>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <M_DIO_void_SetPinValue+0x202>
			        	break ;        /////// break case PORTC_ID

			        	case PORTD_ID :               /// Port D
			        		SetBit(PORTD,pin);        /// SET pin value set it to 1
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <M_DIO_void_SetPinValue+0x1fa>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <M_DIO_void_SetPinValue+0x1f6>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
		break;         /////// break case HIGH

		default:   /*  Do nothing */       break;
		///* default of switch (value) */
		}
}
    12cc:	29 96       	adiw	r28, 0x09	; 9
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <M_DIO_void_PinTog>:
    //// Toggle Pin function //////
void M_DIO_void_PinTog(u8 port , u8 pin)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <M_DIO_void_PinTog+0x6>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <M_DIO_void_PinTog+0x8>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	6a 83       	std	Y+2, r22	; 0x02
	//// SWITCH too determine the Port of the Pin
	switch (port)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3c 83       	std	Y+4, r19	; 0x04
    12f6:	2b 83       	std	Y+3, r18	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	91 05       	cpc	r25, r1
    1300:	51 f1       	breq	.+84     	; 0x1356 <M_DIO_void_PinTog+0x78>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	23 30       	cpi	r18, 0x03	; 3
    1308:	31 05       	cpc	r19, r1
    130a:	34 f4       	brge	.+12     	; 0x1318 <M_DIO_void_PinTog+0x3a>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	61 f0       	breq	.+24     	; 0x132e <M_DIO_void_PinTog+0x50>
    1316:	5a c0       	rjmp	.+180    	; 0x13cc <M_DIO_void_PinTog+0xee>
    1318:	2b 81       	ldd	r18, Y+3	; 0x03
    131a:	3c 81       	ldd	r19, Y+4	; 0x04
    131c:	23 30       	cpi	r18, 0x03	; 3
    131e:	31 05       	cpc	r19, r1
    1320:	71 f1       	breq	.+92     	; 0x137e <M_DIO_void_PinTog+0xa0>
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	91 05       	cpc	r25, r1
    132a:	e9 f1       	breq	.+122    	; 0x13a6 <M_DIO_void_PinTog+0xc8>
    132c:	4f c0       	rjmp	.+158    	; 0x13cc <M_DIO_void_PinTog+0xee>
		{

		  case PORTA_ID :                           /// Port A
			  TogBit(PORTA,pin);                    /// Toggle pin value
    132e:	ab e3       	ldi	r26, 0x3B	; 59
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	eb e3       	ldi	r30, 0x3B	; 59
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <M_DIO_void_PinTog+0x6e>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <M_DIO_void_PinTog+0x6a>
    1350:	84 27       	eor	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	3b c0       	rjmp	.+118    	; 0x13cc <M_DIO_void_PinTog+0xee>
		  break ;                       //// break case PORTA_ID

		  case PORTB_ID :                            /// Port B
			  TogBit(PORTB,pin);                     /// Toggle pin value
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <M_DIO_void_PinTog+0x96>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <M_DIO_void_PinTog+0x92>
    1378:	84 27       	eor	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	27 c0       	rjmp	.+78     	; 0x13cc <M_DIO_void_PinTog+0xee>
		  break ;                      /// / break case PORTB_ID

		  case PORTC_ID :                           /// Port C
			  TogBit(PORTC,pin);                   /// Toggle pin value
    137e:	a5 e3       	ldi	r26, 0x35	; 53
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <M_DIO_void_PinTog+0xbe>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <M_DIO_void_PinTog+0xba>
    13a0:	84 27       	eor	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <M_DIO_void_PinTog+0xee>
		  break ;                       ///break case PORTC_ID

		  case PORTD_ID :                          /// Port D
			  TogBit(PORTD,pin);                    /// Toggle pin value
    13a6:	a2 e3       	ldi	r26, 0x32	; 50
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e2 e3       	ldi	r30, 0x32	; 50
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <M_DIO_void_PinTog+0xe6>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <M_DIO_void_PinTog+0xe2>
    13c8:	84 27       	eor	r24, r20
    13ca:	8c 93       	st	X, r24
		  break ;                       ///break case PORTD_ID

		  default :       /*  Do nothing */      break;
		  ///* default of switch (port) */
		}
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <M_DIO_U8_PinRead>:
u8 M_DIO_U8_PinRead(u8 port , u8 pin)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <M_DIO_U8_PinRead+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <M_DIO_U8_PinRead+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	6b 83       	std	Y+3, r22	; 0x03
	/// local variable
	u8 local_u8_PinValue = 0;
    13ec:	19 82       	std	Y+1, r1	; 0x01
	//// SWITCH too determine the Port of the Pin
		switch (port)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3d 83       	std	Y+5, r19	; 0x05
    13f6:	2c 83       	std	Y+4, r18	; 0x04
    13f8:	4c 81       	ldd	r20, Y+4	; 0x04
    13fa:	5d 81       	ldd	r21, Y+5	; 0x05
    13fc:	42 30       	cpi	r20, 0x02	; 2
    13fe:	51 05       	cpc	r21, r1
    1400:	41 f1       	breq	.+80     	; 0x1452 <M_DIO_U8_PinRead+0x78>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	34 f4       	brge	.+12     	; 0x1418 <M_DIO_U8_PinRead+0x3e>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	21 30       	cpi	r18, 0x01	; 1
    1412:	31 05       	cpc	r19, r1
    1414:	61 f0       	breq	.+24     	; 0x142e <M_DIO_U8_PinRead+0x54>
    1416:	52 c0       	rjmp	.+164    	; 0x14bc <M_DIO_U8_PinRead+0xe2>
    1418:	4c 81       	ldd	r20, Y+4	; 0x04
    141a:	5d 81       	ldd	r21, Y+5	; 0x05
    141c:	43 30       	cpi	r20, 0x03	; 3
    141e:	51 05       	cpc	r21, r1
    1420:	51 f1       	breq	.+84     	; 0x1476 <M_DIO_U8_PinRead+0x9c>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	91 05       	cpc	r25, r1
    142a:	b9 f1       	breq	.+110    	; 0x149a <M_DIO_U8_PinRead+0xc0>
    142c:	47 c0       	rjmp	.+142    	; 0x14bc <M_DIO_U8_PinRead+0xe2>
			{

			  case PORTA_ID :                           /// Port A
				  local_u8_PinValue = GetBit(PINA,pin);                    /// Read pin value
    142e:	e9 e3       	ldi	r30, 0x39	; 57
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <M_DIO_U8_PinRead+0x6c>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <M_DIO_U8_PinRead+0x68>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	35 c0       	rjmp	.+106    	; 0x14bc <M_DIO_U8_PinRead+0xe2>
			  break ;                       //// break case PORTA_ID

			  case PORTB_ID :                            /// Port B
				  local_u8_PinValue = GetBit(PINB,pin);                     /// Read pin value
    1452:	e6 e3       	ldi	r30, 0x36	; 54
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <M_DIO_U8_PinRead+0x90>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <M_DIO_U8_PinRead+0x8c>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	23 c0       	rjmp	.+70     	; 0x14bc <M_DIO_U8_PinRead+0xe2>
			  break ;                      /// / break case PORTB_ID

			  case PORTC_ID :                           /// Port C
				  local_u8_PinValue = GetBit(PINC,pin);                   /// Read pin value
    1476:	e3 e3       	ldi	r30, 0x33	; 51
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a9 01       	movw	r20, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <M_DIO_U8_PinRead+0xb4>
    148a:	55 95       	asr	r21
    148c:	47 95       	ror	r20
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <M_DIO_U8_PinRead+0xb0>
    1492:	ca 01       	movw	r24, r20
    1494:	81 70       	andi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	11 c0       	rjmp	.+34     	; 0x14bc <M_DIO_U8_PinRead+0xe2>
			  break ;                       ///break case PORTC_ID

			  case PORTD_ID :                          /// Port D
				  local_u8_PinValue = GetBit(PIND,pin);                    /// Read pin value
    149a:	e0 e3       	ldi	r30, 0x30	; 48
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a9 01       	movw	r20, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <M_DIO_U8_PinRead+0xd8>
    14ae:	55 95       	asr	r21
    14b0:	47 95       	ror	r20
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <M_DIO_U8_PinRead+0xd4>
    14b6:	ca 01       	movw	r24, r20
    14b8:	81 70       	andi	r24, 0x01	; 1
    14ba:	89 83       	std	Y+1, r24	; 0x01
			  break ;                       ///break case PORTD_ID

			  default :       /*  Do nothing */      break;
			  ///* default of switch (port) */
			}
   return local_u8_PinValue;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <M_ADC_void_AdcInt>:


u16 x =0;

void M_ADC_void_AdcInt(void)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
#if V_REF == AVCC
	/// Selecting voltage reference to AVCC
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG, REFS0);
    14d6:	a7 e2       	ldi	r26, 0x27	; 39
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e7 e2       	ldi	r30, 0x27	; 39
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	80 64       	ori	r24, 0x40	; 64
    14e2:	8c 93       	st	X, r24
	// clear REFS0 bit in ADMUX_REG
	ClrBit(ADMUX_REG ,REFS1);
    14e4:	a7 e2       	ldi	r26, 0x27	; 39
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e7 e2       	ldi	r30, 0x27	; 39
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 77       	andi	r24, 0x7F	; 127
    14f0:	8c 93       	st	X, r24
	// set REFS0 bit in ADMUX_REG
	SetBit(ADMUX_REG ,REFS1);
#endif
	/// selecting Adjustment  Result
	// Clear ADLAR bit on ADMUX_REG to select right adjust result
	ClrBit(ADMUX_REG , ADLAR);
    14f2:	a7 e2       	ldi	r26, 0x27	; 39
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e7 e2       	ldi	r30, 0x27	; 39
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8f 7d       	andi	r24, 0xDF	; 223
    14fe:	8c 93       	st	X, r24
	/// selecting  channel
	// clear the four bit (MUX4 MUX3 MUX2 MUX1 MUX0 ) to select ADC0
	ClrBit(ADMUX_REG , MUX0);
    1500:	a7 e2       	ldi	r26, 0x27	; 39
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e7 e2       	ldi	r30, 0x27	; 39
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX1);
    150e:	a7 e2       	ldi	r26, 0x27	; 39
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e7 e2       	ldi	r30, 0x27	; 39
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX2);
    151c:	a7 e2       	ldi	r26, 0x27	; 39
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e7 e2       	ldi	r30, 0x27	; 39
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8b 7f       	andi	r24, 0xFB	; 251
    1528:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX3);
    152a:	a7 e2       	ldi	r26, 0x27	; 39
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e7 e2       	ldi	r30, 0x27	; 39
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	87 7f       	andi	r24, 0xF7	; 247
    1536:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG , MUX4);
    1538:	a7 e2       	ldi	r26, 0x27	; 39
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e7 e2       	ldi	r30, 0x27	; 39
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	8f 7e       	andi	r24, 0xEF	; 239
    1544:	8c 93       	st	X, r24

	//// select  Prescaler
	// To select 128 as devision factor C the three bit (ADPS2 ADPS1 ADPS0 ) on  ADCSRA_REG to
	SetBit(ADCSRA_REG , ADPS0 );
    1546:	a6 e2       	ldi	r26, 0x26	; 38
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e6 e2       	ldi	r30, 0x26	; 38
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1554:	a6 e2       	ldi	r26, 0x26	; 38
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e6 e2       	ldi	r30, 0x26	; 38
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG , ADPS1 );
    1562:	a6 e2       	ldi	r26, 0x26	; 38
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e6 e2       	ldi	r30, 0x26	; 38
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	82 60       	ori	r24, 0x02	; 2
    156e:	8c 93       	st	X, r24

	/// To Enable Auto Trigger mode -> free running mode
	// set ADATE bit in  ADCSRA_REG
	 SetBit(ADCSRA_REG , ADATE );
    1570:	a6 e2       	ldi	r26, 0x26	; 38
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e6 e2       	ldi	r30, 0x26	; 38
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 62       	ori	r24, 0x20	; 32
    157c:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS2 );
    157e:	a0 e5       	ldi	r26, 0x50	; 80
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e0 e5       	ldi	r30, 0x50	; 80
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 77       	andi	r24, 0x7F	; 127
    158a:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS1 );
    158c:	a0 e5       	ldi	r26, 0x50	; 80
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e0 e5       	ldi	r30, 0x50	; 80
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 7b       	andi	r24, 0xBF	; 191
    1598:	8c 93       	st	X, r24
	 ClrBit(SFIOR_REG , ADTS0 );
    159a:	a0 e5       	ldi	r26, 0x50	; 80
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e0 e5       	ldi	r30, 0x50	; 80
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7d       	andi	r24, 0xDF	; 223
    15a6:	8c 93       	st	X, r24

	///Enable the ADC circuit
	//set bit ADEN on ADCSRA_REG
	SetBit(ADCSRA_REG , ADEN );
    15a8:	a6 e2       	ldi	r26, 0x26	; 38
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e6 e2       	ldi	r30, 0x26	; 38
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 68       	ori	r24, 0x80	; 128
    15b4:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG ,ADSC );     //// to start conversion
    M_GIE_void_GIE_EN();          //// to enable  general interrupt
	SetBit(ADCSRA_REG ,ADIE );   //// to enable  ADC interrupt

#endif
}
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <M_ADC_u16_AdcRead>:
#if  ADC_MODE ==  ADC_POL
u16 M_ADC_u16_AdcRead(void)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
	//u16 Local_u16_value = 0;
	////////to start conversion
	//set ADSC bit in  ADCSRA_REG
	SetBit(ADCSRA_REG ,ADSC );
    15c4:	a6 e2       	ldi	r26, 0x26	; 38
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e6 e2       	ldi	r30, 0x26	; 38
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	80 64       	ori	r24, 0x40	; 64
    15d0:	8c 93       	st	X, r24

   /// check  ADC Interrupt Flag to see if conversion completed or not
  	while(GetBit(ADCSRA_REG, ADIF) == 0);
    15d2:	e6 e2       	ldi	r30, 0x26	; 38
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	82 95       	swap	r24
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	a9 f3       	breq	.-22     	; 0x15d2 <M_ADC_u16_AdcRead+0x16>
	return ADC_REG ;
    15e8:	e4 e2       	ldi	r30, 0x24	; 36
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <H_TEMPSENSOR_void_TempSensorInt>:
 *      Author: AbdelRahman Atef
 */
#include "DIO_Int.h"
#include "TEMPSENSOR_Int.h"
void H_TEMPSENSOR_void_TempSensorInt(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
     M_DIO_void_SetPinDirection(PORTA_ID, PIN0, INPUT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <H_TEMPSENSOR_void_TempSensorRead>:
u8 H_TEMPSENSOR_void_TempSensorRead(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <H_TEMPSENSOR_void_TempSensorRead+0x6>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
  u8 local_u8_AdcReading=0;
    1618:	1a 82       	std	Y+2, r1	; 0x02
  local_u8_AdcReading = M_ADC_u16_AdcRead();
    161a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <M_ADC_u16_AdcRead>
    161e:	8a 83       	std	Y+2, r24	; 0x02
  u8 Temp =	  (((u32)local_u8_AdcReading * 500 )/1023);
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 e0       	ldi	r26, 0x00	; 0
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	24 ef       	ldi	r18, 0xF4	; 244
    162c:	31 e0       	ldi	r19, 0x01	; 1
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__mulsi3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	2f ef       	ldi	r18, 0xFF	; 255
    1640:	33 e0       	ldi	r19, 0x03	; 3
    1642:	40 e0       	ldi	r20, 0x00	; 0
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__udivmodsi4>
    164e:	da 01       	movw	r26, r20
    1650:	c9 01       	movw	r24, r18
    1652:	89 83       	std	Y+1, r24	; 0x01
  return Temp;
    1654:	89 81       	ldd	r24, Y+1	; 0x01
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <H_SSD_Void_SsdInt>:

#include "SSD_int.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_SSD_Void_SsdInt(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	///******_Setting SSEG_LED_A_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_A_PORT, SSEG_LED_A_PIN, OUTPUT);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_B_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_B_PORT, SSEG_LED_B_PIN, OUTPUT);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_C_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_C_PORT, SSEG_LED_C_PIN, OUTPUT);
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	62 e0       	ldi	r22, 0x02	; 2
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_D_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_D_PORT, SSEG_LED_D_PIN, OUTPUT);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_E_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_E_PORT, SSEG_LED_E_PIN, OUTPUT);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_F_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_F_PORT, SSEG_LED_F_PIN, OUTPUT);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	65 e0       	ldi	r22, 0x05	; 5
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_LED_G_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_LED_G_PORT, SSEG_LED_G_PIN, OUTPUT);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	66 e0       	ldi	r22, 0x06	; 6
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>

	///******_Setting SSEG_DOT_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_DOT_PORT  , SSEG_DOT_PIN  , OUTPUT);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	67 e0       	ldi	r22, 0x07	; 7
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>


	///******_Setting SSEG_EN1_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN1_PORT  , SSEG_EN1_PIN   , OUTPUT);
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	66 e0       	ldi	r22, 0x06	; 6
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///******_Setting SSEG_EN2_PIN Pin direction to OUTPUT _***********///
	M_DIO_void_SetPinDirection(SSEG_EN2_PORT  , SSEG_EN2_PIN   , OUTPUT);
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	67 e0       	ldi	r22, 0x07	; 7
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>


}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <H_SSD_Void_SsdDisplay>:

void H_SSD_Void_SsdDisplay(u8 Local_u8_Num)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	a4 97       	sbiw	r28, 0x24	; 36
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	88 a3       	std	Y+32, r24	; 0x20
  ///***** Local_u8_Units is a local variable to get Units number *******//
	 u8 Local_u8_Units = Local_u8_Num %10;
    16e8:	88 a1       	ldd	r24, Y+32	; 0x20
    16ea:	9a e0       	ldi	r25, 0x0A	; 10
    16ec:	69 2f       	mov	r22, r25
    16ee:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    16f2:	89 2f       	mov	r24, r25
    16f4:	8f 8f       	std	Y+31, r24	; 0x1f
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
    16f6:	88 a1       	ldd	r24, Y+32	; 0x20
    16f8:	9a e0       	ldi	r25, 0x0A	; 10
    16fa:	69 2f       	mov	r22, r25
    16fc:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__udivmodqi4>
    1700:	8e 8f       	std	Y+30, r24	; 0x1e
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1702:	1d 8e       	std	Y+29, r1	; 0x1d
    1704:	77 c4       	rjmp	.+2286   	; 0x1ff4 <H_SSD_Void_SsdDisplay+0x922>
	 	{
///********* switch case to Display the Units number ***********//
	 switch (Local_u8_Units)
    1706:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	3c a3       	std	Y+36, r19	; 0x24
    170e:	2b a3       	std	Y+35, r18	; 0x23
    1710:	8b a1       	ldd	r24, Y+35	; 0x23
    1712:	9c a1       	ldd	r25, Y+36	; 0x24
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <H_SSD_Void_SsdDisplay+0x4a>
    171a:	d7 c0       	rjmp	.+430    	; 0x18ca <H_SSD_Void_SsdDisplay+0x1f8>
    171c:	2b a1       	ldd	r18, Y+35	; 0x23
    171e:	3c a1       	ldd	r19, Y+36	; 0x24
    1720:	25 30       	cpi	r18, 0x05	; 5
    1722:	31 05       	cpc	r19, r1
    1724:	ec f4       	brge	.+58     	; 0x1760 <H_SSD_Void_SsdDisplay+0x8e>
    1726:	8b a1       	ldd	r24, Y+35	; 0x23
    1728:	9c a1       	ldd	r25, Y+36	; 0x24
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <H_SSD_Void_SsdDisplay+0x60>
    1730:	60 c0       	rjmp	.+192    	; 0x17f2 <H_SSD_Void_SsdDisplay+0x120>
    1732:	2b a1       	ldd	r18, Y+35	; 0x23
    1734:	3c a1       	ldd	r19, Y+36	; 0x24
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <H_SSD_Void_SsdDisplay+0x74>
    173c:	8b a1       	ldd	r24, Y+35	; 0x23
    173e:	9c a1       	ldd	r25, Y+36	; 0x24
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	99 f1       	breq	.+102    	; 0x17aa <H_SSD_Void_SsdDisplay+0xd8>
    1744:	99 c1       	rjmp	.+818    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
    1746:	2b a1       	ldd	r18, Y+35	; 0x23
    1748:	3c a1       	ldd	r19, Y+36	; 0x24
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <H_SSD_Void_SsdDisplay+0x80>
    1750:	74 c0       	rjmp	.+232    	; 0x183a <H_SSD_Void_SsdDisplay+0x168>
    1752:	8b a1       	ldd	r24, Y+35	; 0x23
    1754:	9c a1       	ldd	r25, Y+36	; 0x24
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <H_SSD_Void_SsdDisplay+0x8c>
    175c:	92 c0       	rjmp	.+292    	; 0x1882 <H_SSD_Void_SsdDisplay+0x1b0>
    175e:	8c c1       	rjmp	.+792    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
    1760:	2b a1       	ldd	r18, Y+35	; 0x23
    1762:	3c a1       	ldd	r19, Y+36	; 0x24
    1764:	27 30       	cpi	r18, 0x07	; 7
    1766:	31 05       	cpc	r19, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <H_SSD_Void_SsdDisplay+0x9a>
    176a:	1b c1       	rjmp	.+566    	; 0x19a2 <H_SSD_Void_SsdDisplay+0x2d0>
    176c:	8b a1       	ldd	r24, Y+35	; 0x23
    176e:	9c a1       	ldd	r25, Y+36	; 0x24
    1770:	88 30       	cpi	r24, 0x08	; 8
    1772:	91 05       	cpc	r25, r1
    1774:	6c f4       	brge	.+26     	; 0x1790 <H_SSD_Void_SsdDisplay+0xbe>
    1776:	2b a1       	ldd	r18, Y+35	; 0x23
    1778:	3c a1       	ldd	r19, Y+36	; 0x24
    177a:	25 30       	cpi	r18, 0x05	; 5
    177c:	31 05       	cpc	r19, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <H_SSD_Void_SsdDisplay+0xb0>
    1780:	c8 c0       	rjmp	.+400    	; 0x1912 <H_SSD_Void_SsdDisplay+0x240>
    1782:	8b a1       	ldd	r24, Y+35	; 0x23
    1784:	9c a1       	ldd	r25, Y+36	; 0x24
    1786:	86 30       	cpi	r24, 0x06	; 6
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <H_SSD_Void_SsdDisplay+0xbc>
    178c:	e6 c0       	rjmp	.+460    	; 0x195a <H_SSD_Void_SsdDisplay+0x288>
    178e:	74 c1       	rjmp	.+744    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
    1790:	2b a1       	ldd	r18, Y+35	; 0x23
    1792:	3c a1       	ldd	r19, Y+36	; 0x24
    1794:	28 30       	cpi	r18, 0x08	; 8
    1796:	31 05       	cpc	r19, r1
    1798:	09 f4       	brne	.+2      	; 0x179c <H_SSD_Void_SsdDisplay+0xca>
    179a:	27 c1       	rjmp	.+590    	; 0x19ea <H_SSD_Void_SsdDisplay+0x318>
    179c:	8b a1       	ldd	r24, Y+35	; 0x23
    179e:	9c a1       	ldd	r25, Y+36	; 0x24
    17a0:	89 30       	cpi	r24, 0x09	; 9
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <H_SSD_Void_SsdDisplay+0xd6>
    17a6:	45 c1       	rjmp	.+650    	; 0x1a32 <H_SSD_Void_SsdDisplay+0x360>
    17a8:	67 c1       	rjmp	.+718    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	 {
	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	41 e0       	ldi	r20, 0x01	; 1
    17b0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	62 e0       	ldi	r22, 0x02	; 2
    17c2:	41 e0       	ldi	r20, 0x01	; 1
    17c4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	63 e0       	ldi	r22, 0x03	; 3
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	64 e0       	ldi	r22, 0x04	; 4
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	65 e0       	ldi	r22, 0x05	; 5
    17e0:	41 e0       	ldi	r20, 0x01	; 1
    17e2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	66 e0       	ldi	r22, 0x06	; 6
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    17f0:	43 c1       	rjmp	.+646    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	63 e0       	ldi	r22, 0x03	; 3
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	64 e0       	ldi	r22, 0x04	; 4
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	65 e0       	ldi	r22, 0x05	; 5
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	66 e0       	ldi	r22, 0x06	; 6
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1838:	1f c1       	rjmp	.+574    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	63 e0       	ldi	r22, 0x03	; 3
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	64 e0       	ldi	r22, 0x04	; 4
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	65 e0       	ldi	r22, 0x05	; 5
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	66 e0       	ldi	r22, 0x06	; 6
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1880:	fb c0       	rjmp	.+502    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	41 e0       	ldi	r20, 0x01	; 1
    1888:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	61 e0       	ldi	r22, 0x01	; 1
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	62 e0       	ldi	r22, 0x02	; 2
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	63 e0       	ldi	r22, 0x03	; 3
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	64 e0       	ldi	r22, 0x04	; 4
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	65 e0       	ldi	r22, 0x05	; 5
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	66 e0       	ldi	r22, 0x06	; 6
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    18c8:	d7 c0       	rjmp	.+430    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	62 e0       	ldi	r22, 0x02	; 2
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	63 e0       	ldi	r22, 0x03	; 3
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	65 e0       	ldi	r22, 0x05	; 5
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	66 e0       	ldi	r22, 0x06	; 6
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1910:	b3 c0       	rjmp	.+358    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	41 e0       	ldi	r20, 0x01	; 1
    1918:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	62 e0       	ldi	r22, 0x02	; 2
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	63 e0       	ldi	r22, 0x03	; 3
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	64 e0       	ldi	r22, 0x04	; 4
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	65 e0       	ldi	r22, 0x05	; 5
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	66 e0       	ldi	r22, 0x06	; 6
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1958:	8f c0       	rjmp	.+286    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	41 e0       	ldi	r20, 0x01	; 1
    1960:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	41 e0       	ldi	r20, 0x01	; 1
    197e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	64 e0       	ldi	r22, 0x04	; 4
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	65 e0       	ldi	r22, 0x05	; 5
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	66 e0       	ldi	r22, 0x06	; 6
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    19a0:	6b c0       	rjmp	.+214    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	62 e0       	ldi	r22, 0x02	; 2
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	63 e0       	ldi	r22, 0x03	; 3
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	64 e0       	ldi	r22, 0x04	; 4
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	65 e0       	ldi	r22, 0x05	; 5
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	66 e0       	ldi	r22, 0x06	; 6
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    19e8:	47 c0       	rjmp	.+142    	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	63 e0       	ldi	r22, 0x03	; 3
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	64 e0       	ldi	r22, 0x04	; 4
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	65 e0       	ldi	r22, 0x05	; 5
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	66 e0       	ldi	r22, 0x06	; 6
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1a30:	23 c0       	rjmp	.+70     	; 0x1a78 <H_SSD_Void_SsdDisplay+0x3a6>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	41 e0       	ldi	r20, 0x01	; 1
    1a38:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	62 e0       	ldi	r22, 0x02	; 2
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	64 e0       	ldi	r22, 0x04	; 4
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	65 e0       	ldi	r22, 0x05	; 5
    1a68:	41 e0       	ldi	r20, 0x01	; 1
    1a6a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	66 e0       	ldi	r22, 0x06	; 6
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
  * To get units Numbers displayed on
  * Enable the SSEG_EN1_PIN = SetBit LOW
  * and
  * Disable the SSEG_EN2_PIN = SetBit HIGH
  */
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  LOW);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	66 e0       	ldi	r22, 0x06	; 6
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	67 e0       	ldi	r22, 0x07	; 7
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e8       	ldi	r26, 0x80	; 128
    1a92:	bf e3       	ldi	r27, 0x3F	; 63
    1a94:	89 8f       	std	Y+25, r24	; 0x19
    1a96:	9a 8f       	std	Y+26, r25	; 0x1a
    1a98:	ab 8f       	std	Y+27, r26	; 0x1b
    1a9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a e7       	ldi	r20, 0x7A	; 122
    1aaa:	53 e4       	ldi	r21, 0x43	; 67
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8d 8b       	std	Y+21, r24	; 0x15
    1ab6:	9e 8b       	std	Y+22, r25	; 0x16
    1ab8:	af 8b       	std	Y+23, r26	; 0x17
    1aba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1abc:	6d 89       	ldd	r22, Y+21	; 0x15
    1abe:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <H_SSD_Void_SsdDisplay+0x40c>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <H_SSD_Void_SsdDisplay+0x48a>
	else if (__tmp > 65535)
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <H_SSD_Void_SsdDisplay+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	69 8d       	ldd	r22, Y+25	; 0x19
    1af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9c 8b       	std	Y+20, r25	; 0x14
    1b1c:	8b 8b       	std	Y+19, r24	; 0x13
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <H_SSD_Void_SsdDisplay+0x46c>
    1b20:	89 e1       	ldi	r24, 0x19	; 25
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9a 8b       	std	Y+18, r25	; 0x12
    1b26:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b28:	89 89       	ldd	r24, Y+17	; 0x11
    1b2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <H_SSD_Void_SsdDisplay+0x45a>
    1b30:	9a 8b       	std	Y+18, r25	; 0x12
    1b32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8b 89       	ldd	r24, Y+19	; 0x13
    1b36:	9c 89       	ldd	r25, Y+20	; 0x14
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <H_SSD_Void_SsdDisplay+0x44e>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <H_SSD_Void_SsdDisplay+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
    1b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b60:	98 8b       	std	Y+16, r25	; 0x10
    1b62:	8f 87       	std	Y+15, r24	; 0x0f
    1b64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b66:	98 89       	ldd	r25, Y+16	; 0x10
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <H_SSD_Void_SsdDisplay+0x496>
    1b6c:	98 8b       	std	Y+16, r25	; 0x10
    1b6e:	8f 87       	std	Y+15, r24	; 0x0f
	 	 	         _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN,  HIGH);
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	66 e0       	ldi	r22, 0x06	; 6
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>



///********* switch case to Display the Tens number ***********//
	 switch (Local_u8_Tens)
    1b7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3a a3       	std	Y+34, r19	; 0x22
    1b82:	29 a3       	std	Y+33, r18	; 0x21
    1b84:	89 a1       	ldd	r24, Y+33	; 0x21
    1b86:	9a a1       	ldd	r25, Y+34	; 0x22
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <H_SSD_Void_SsdDisplay+0x4be>
    1b8e:	d7 c0       	rjmp	.+430    	; 0x1d3e <H_SSD_Void_SsdDisplay+0x66c>
    1b90:	29 a1       	ldd	r18, Y+33	; 0x21
    1b92:	3a a1       	ldd	r19, Y+34	; 0x22
    1b94:	25 30       	cpi	r18, 0x05	; 5
    1b96:	31 05       	cpc	r19, r1
    1b98:	ec f4       	brge	.+58     	; 0x1bd4 <H_SSD_Void_SsdDisplay+0x502>
    1b9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <H_SSD_Void_SsdDisplay+0x4d4>
    1ba4:	60 c0       	rjmp	.+192    	; 0x1c66 <H_SSD_Void_SsdDisplay+0x594>
    1ba6:	29 a1       	ldd	r18, Y+33	; 0x21
    1ba8:	3a a1       	ldd	r19, Y+34	; 0x22
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	2c f4       	brge	.+10     	; 0x1bba <H_SSD_Void_SsdDisplay+0x4e8>
    1bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	99 f1       	breq	.+102    	; 0x1c1e <H_SSD_Void_SsdDisplay+0x54c>
    1bb8:	99 c1       	rjmp	.+818    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
    1bba:	29 a1       	ldd	r18, Y+33	; 0x21
    1bbc:	3a a1       	ldd	r19, Y+34	; 0x22
    1bbe:	22 30       	cpi	r18, 0x02	; 2
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <H_SSD_Void_SsdDisplay+0x4f4>
    1bc4:	74 c0       	rjmp	.+232    	; 0x1cae <H_SSD_Void_SsdDisplay+0x5dc>
    1bc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bca:	83 30       	cpi	r24, 0x03	; 3
    1bcc:	91 05       	cpc	r25, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <H_SSD_Void_SsdDisplay+0x500>
    1bd0:	92 c0       	rjmp	.+292    	; 0x1cf6 <H_SSD_Void_SsdDisplay+0x624>
    1bd2:	8c c1       	rjmp	.+792    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
    1bd4:	29 a1       	ldd	r18, Y+33	; 0x21
    1bd6:	3a a1       	ldd	r19, Y+34	; 0x22
    1bd8:	27 30       	cpi	r18, 0x07	; 7
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <H_SSD_Void_SsdDisplay+0x50e>
    1bde:	1b c1       	rjmp	.+566    	; 0x1e16 <H_SSD_Void_SsdDisplay+0x744>
    1be0:	89 a1       	ldd	r24, Y+33	; 0x21
    1be2:	9a a1       	ldd	r25, Y+34	; 0x22
    1be4:	88 30       	cpi	r24, 0x08	; 8
    1be6:	91 05       	cpc	r25, r1
    1be8:	6c f4       	brge	.+26     	; 0x1c04 <H_SSD_Void_SsdDisplay+0x532>
    1bea:	29 a1       	ldd	r18, Y+33	; 0x21
    1bec:	3a a1       	ldd	r19, Y+34	; 0x22
    1bee:	25 30       	cpi	r18, 0x05	; 5
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <H_SSD_Void_SsdDisplay+0x524>
    1bf4:	c8 c0       	rjmp	.+400    	; 0x1d86 <H_SSD_Void_SsdDisplay+0x6b4>
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfa:	86 30       	cpi	r24, 0x06	; 6
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <H_SSD_Void_SsdDisplay+0x530>
    1c00:	e6 c0       	rjmp	.+460    	; 0x1dce <H_SSD_Void_SsdDisplay+0x6fc>
    1c02:	74 c1       	rjmp	.+744    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
    1c04:	29 a1       	ldd	r18, Y+33	; 0x21
    1c06:	3a a1       	ldd	r19, Y+34	; 0x22
    1c08:	28 30       	cpi	r18, 0x08	; 8
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <H_SSD_Void_SsdDisplay+0x53e>
    1c0e:	27 c1       	rjmp	.+590    	; 0x1e5e <H_SSD_Void_SsdDisplay+0x78c>
    1c10:	89 a1       	ldd	r24, Y+33	; 0x21
    1c12:	9a a1       	ldd	r25, Y+34	; 0x22
    1c14:	89 30       	cpi	r24, 0x09	; 9
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <H_SSD_Void_SsdDisplay+0x54a>
    1c1a:	45 c1       	rjmp	.+650    	; 0x1ea6 <H_SSD_Void_SsdDisplay+0x7d4>
    1c1c:	67 c1       	rjmp	.+718    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	 {

	 ///**case number is 0 turn on all SSD_LEDs_ and turn off  SSD_LED_G
	  case   0:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	66 e0       	ldi	r22, 0x06	; 6
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1c64:	43 c1       	rjmp	.+646    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	  ///**case number is 1 turn on  SSD_LED_B and SSD_LED_C****//
	  case   1:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	61 e0       	ldi	r22, 0x01	; 1
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	63 e0       	ldi	r22, 0x03	; 3
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	64 e0       	ldi	r22, 0x04	; 4
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	65 e0       	ldi	r22, 0x05	; 5
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	66 e0       	ldi	r22, 0x06	; 6
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1cac:	1f c1       	rjmp	.+574    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
    ///**case number is 2 turn on all LEDs_ and turn off LED_C & LED_F**//
	  case   2:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN ,  LOW);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	62 e0       	ldi	r22, 0x02	; 2
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	63 e0       	ldi	r22, 0x03	; 3
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	64 e0       	ldi	r22, 0x04	; 4
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	65 e0       	ldi	r22, 0x05	; 5
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	66 e0       	ldi	r22, 0x06	; 6
    1cee:	41 e0       	ldi	r20, 0x01	; 1
    1cf0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1cf4:	fb c0       	rjmp	.+502    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
	///**case number is 3 turn on all LEDs_ and turn off LED_E & LED_F**//
	  case   3:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	61 e0       	ldi	r22, 0x01	; 1
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	63 e0       	ldi	r22, 0x03	; 3
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	64 e0       	ldi	r22, 0x04	; 4
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	65 e0       	ldi	r22, 0x05	; 5
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	66 e0       	ldi	r22, 0x06	; 6
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1d3c:	d7 c0       	rjmp	.+430    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 4 turn on all LEDs_ and turn off LED_A,LED_D& LED_E**//
	  case   4:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN ,  LOW);
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	63 e0       	ldi	r22, 0x03	; 3
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	64 e0       	ldi	r22, 0x04	; 4
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	65 e0       	ldi	r22, 0x05	; 5
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	66 e0       	ldi	r22, 0x06	; 6
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1d84:	b3 c0       	rjmp	.+358    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 5 turn on all LEDs_ and turn off LED_B & LED_E**//
	  case   5:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN ,  LOW);
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	62 e0       	ldi	r22, 0x02	; 2
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	63 e0       	ldi	r22, 0x03	; 3
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	64 e0       	ldi	r22, 0x04	; 4
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	65 e0       	ldi	r22, 0x05	; 5
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	66 e0       	ldi	r22, 0x06	; 6
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1dcc:	8f c0       	rjmp	.+286    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 6 turn on all LEDs_ and turn off LED_F**//
	  case   6:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	62 e0       	ldi	r22, 0x02	; 2
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	64 e0       	ldi	r22, 0x04	; 4
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN ,  LOW);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	65 e0       	ldi	r22, 0x05	; 5
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	66 e0       	ldi	r22, 0x06	; 6
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1e14:	6b c0       	rjmp	.+214    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 7 turn on all LEDs_ and turn off LED_D,LED_E& LED_G**//
	  case   7:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	61 e0       	ldi	r22, 0x01	; 1
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	62 e0       	ldi	r22, 0x02	; 2
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN ,  LOW);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	64 e0       	ldi	r22, 0x04	; 4
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	65 e0       	ldi	r22, 0x05	; 5
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN ,  LOW);
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	66 e0       	ldi	r22, 0x06	; 6
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1e5c:	47 c0       	rjmp	.+142    	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
 ///**case number is 8 turn on all LEDs_ ****************************//
	  case   8:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	61 e0       	ldi	r22, 0x01	; 1
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	63 e0       	ldi	r22, 0x03	; 3
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN , HIGH);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	64 e0       	ldi	r22, 0x04	; 4
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	66 e0       	ldi	r22, 0x06	; 6
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1ea4:	23 c0       	rjmp	.+70     	; 0x1eec <H_SSD_Void_SsdDisplay+0x81a>
	  break;
  ///**case number is 9 turn on all LEDs_ and turn off  LED_E**//
	  case   9:
		  M_DIO_void_SetPinValue(SSEG_LED_A_PORT, SSEG_LED_A_PIN , HIGH);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_B_PORT, SSEG_LED_B_PIN , HIGH);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_C_PORT, SSEG_LED_C_PIN , HIGH);
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_D_PORT, SSEG_LED_D_PIN , HIGH);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_E_PORT, SSEG_LED_E_PIN ,  LOW);
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_F_PORT, SSEG_LED_F_PIN , HIGH);
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	65 e0       	ldi	r22, 0x05	; 5
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		  M_DIO_void_SetPinValue(SSEG_LED_G_PORT, SSEG_LED_G_PIN , HIGH);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	66 e0       	ldi	r22, 0x06	; 6
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
 * Disable the SSEG_EN1_PIN = SetBit HIGH
 * and
 * Enable the SSEG_EN2_PIN = SetBit LOW
 *
 */
     M_DIO_void_SetPinValue(SSEG_EN1_PORT, SSEG_EN1_PIN, HIGH);
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	66 e0       	ldi	r22, 0x06	; 6
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	8b 87       	std	Y+11, r24	; 0x0b
    1f0a:	9c 87       	std	Y+12, r25	; 0x0c
    1f0c:	ad 87       	std	Y+13, r26	; 0x0d
    1f0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	53 e4       	ldi	r21, 0x43	; 67
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8f 83       	std	Y+7, r24	; 0x07
    1f2a:	98 87       	std	Y+8, r25	; 0x08
    1f2c:	a9 87       	std	Y+9, r26	; 0x09
    1f2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f30:	6f 81       	ldd	r22, Y+7	; 0x07
    1f32:	78 85       	ldd	r23, Y+8	; 0x08
    1f34:	89 85       	ldd	r24, Y+9	; 0x09
    1f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e8       	ldi	r20, 0x80	; 128
    1f3e:	5f e3       	ldi	r21, 0x3F	; 63
    1f40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f44:	88 23       	and	r24, r24
    1f46:	2c f4       	brge	.+10     	; 0x1f52 <H_SSD_Void_SsdDisplay+0x880>
		__ticks = 1;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	3f c0       	rjmp	.+126    	; 0x1fd0 <H_SSD_Void_SsdDisplay+0x8fe>
	else if (__tmp > 65535)
    1f52:	6f 81       	ldd	r22, Y+7	; 0x07
    1f54:	78 85       	ldd	r23, Y+8	; 0x08
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	3f ef       	ldi	r19, 0xFF	; 255
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	57 e4       	ldi	r21, 0x47	; 71
    1f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f66:	18 16       	cp	r1, r24
    1f68:	4c f5       	brge	.+82     	; 0x1fbc <H_SSD_Void_SsdDisplay+0x8ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e2       	ldi	r20, 0x20	; 32
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <H_SSD_Void_SsdDisplay+0x8e0>
    1f94:	89 e1       	ldi	r24, 0x19	; 25
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <H_SSD_Void_SsdDisplay+0x8ce>
    1fa4:	9c 83       	std	Y+4, r25	; 0x04
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	69 f7       	brne	.-38     	; 0x1f94 <H_SSD_Void_SsdDisplay+0x8c2>
    1fba:	14 c0       	rjmp	.+40     	; 0x1fe4 <H_SSD_Void_SsdDisplay+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	9a 83       	std	Y+2, r25	; 0x02
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	9a 81       	ldd	r25, Y+2	; 0x02
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <H_SSD_Void_SsdDisplay+0x90a>
    1fe0:	9a 83       	std	Y+2, r25	; 0x02
    1fe2:	89 83       	std	Y+1, r24	; 0x01
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);
    1fe4:	83 e0       	ldi	r24, 0x03	; 3
    1fe6:	67 e0       	ldi	r22, 0x07	; 7
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	 u8 Local_u8_Units = Local_u8_Num %10;
 ///***** Local_u8_Tens is a local variable to get Tens number *******//
	 u8 Local_u8_Tens  = Local_u8_Num / 10;
	 u8 Local_U8_Conter ;
	 ///*******for loop to Repeat  the number displayed  to be able to see it*******///
	 for (Local_U8_Conter=0;Local_U8_Conter<200;Local_U8_Conter++)
    1fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff0:	8f 5f       	subi	r24, 0xFF	; 255
    1ff2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff6:	88 3c       	cpi	r24, 0xC8	; 200
    1ff8:	08 f4       	brcc	.+2      	; 0x1ffc <H_SSD_Void_SsdDisplay+0x92a>
    1ffa:	85 cb       	rjmp	.-2294   	; 0x1706 <H_SSD_Void_SsdDisplay+0x34>
     M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, LOW);
          _delay_ms(SSD_DELAY_TIME); ///delay for one mile second
	 M_DIO_void_SetPinValue(SSEG_EN2_PORT, SSEG_EN2_PIN, HIGH);

}
}
    1ffc:	a4 96       	adiw	r28, 0x24	; 36
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	cd bf       	out	0x3d, r28	; 61
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <H_SSD_Void_SsdDisplayCountDown>:
///***********to count down and display numbers*******/
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <H_SSD_Void_SsdDisplayCountDown+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	8a 83       	std	Y+2, r24	; 0x02

	   s8 Local_s8_Counter = 0;   ////for loop local counter
    201a:	19 82       	std	Y+1, r1	; 0x01
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	06 c0       	rjmp	.+12     	; 0x202e <H_SSD_Void_SsdDisplayCountDown+0x20>
	     {
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <H_SSD_Void_SsdDisplay>
void H_SSD_Void_SsdDisplayCountDown(u8 Local_u8_num)
{

	   s8 Local_s8_Counter = 0;   ////for loop local counter
   /////for loop to count down the number entered from the user
	 for(  Local_s8_Counter  = Local_u8_num ; Local_s8_Counter >=0 ; Local_s8_Counter--)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	81 50       	subi	r24, 0x01	; 1
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	88 23       	and	r24, r24
    2032:	bc f7       	brge	.-18     	; 0x2022 <H_SSD_Void_SsdDisplayCountDown+0x14>
		     /////calling  H_SSD_Void_SsdDisplay to display numbers counted down
			H_SSD_Void_SsdDisplay(Local_s8_Counter);
		 }


}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <H_PushButton_void_PushButtonInt>:
/*********Macros ************/

/********************************_FUNCTION _****************************/
///************_H_PushButton_void_PushButtonInt to set pin direction  _***********//
void H_PushButton_void_PushButtonInt(u8 Local_u8_PushButton)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <H_PushButton_void_PushButtonInt+0x6>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	3b 83       	std	Y+3, r19	; 0x03
    2054:	2a 83       	std	Y+2, r18	; 0x02
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	9b 81       	ldd	r25, Y+3	; 0x03
    205a:	82 30       	cpi	r24, 0x02	; 2
    205c:	91 05       	cpc	r25, r1
    205e:	e1 f0       	breq	.+56     	; 0x2098 <H_PushButton_void_PushButtonInt+0x5a>
    2060:	2a 81       	ldd	r18, Y+2	; 0x02
    2062:	3b 81       	ldd	r19, Y+3	; 0x03
    2064:	23 30       	cpi	r18, 0x03	; 3
    2066:	31 05       	cpc	r19, r1
    2068:	34 f4       	brge	.+12     	; 0x2076 <H_PushButton_void_PushButtonInt+0x38>
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	91 05       	cpc	r25, r1
    2072:	61 f0       	breq	.+24     	; 0x208c <H_PushButton_void_PushButtonInt+0x4e>
    2074:	22 c0       	rjmp	.+68     	; 0x20ba <H_PushButton_void_PushButtonInt+0x7c>
    2076:	2a 81       	ldd	r18, Y+2	; 0x02
    2078:	3b 81       	ldd	r19, Y+3	; 0x03
    207a:	23 30       	cpi	r18, 0x03	; 3
    207c:	31 05       	cpc	r19, r1
    207e:	91 f0       	breq	.+36     	; 0x20a4 <H_PushButton_void_PushButtonInt+0x66>
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	84 30       	cpi	r24, 0x04	; 4
    2086:	91 05       	cpc	r25, r1
    2088:	99 f0       	breq	.+38     	; 0x20b0 <H_PushButton_void_PushButtonInt+0x72>
    208a:	17 c0       	rjmp	.+46     	; 0x20ba <H_PushButton_void_PushButtonInt+0x7c>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Set PUSHBUTTON1_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN , INPUT);
    208c:	84 e0       	ldi	r24, 0x04	; 4
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    2096:	11 c0       	rjmp	.+34     	; 0x20ba <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Set PUSHBUTTON2_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN, INPUT);
    2098:	84 e0       	ldi	r24, 0x04	; 4
    209a:	63 e0       	ldi	r22, 0x03	; 3
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    20a2:	0b c0       	rjmp	.+22     	; 0x20ba <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Set PUSHBUTTON3_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN, INPUT);
    20a4:	84 e0       	ldi	r24, 0x04	; 4
    20a6:	64 e0       	ldi	r22, 0x04	; 4
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    20ae:	05 c0       	rjmp	.+10     	; 0x20ba <H_PushButton_void_PushButtonInt+0x7c>
		break;
		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Set PUSHBUTTON4_PIN value to INPUT  _***********//
		M_DIO_void_SetPinDirection(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN, INPUT);
    20b0:	84 e0       	ldi	r24, 0x04	; 4
    20b2:	65 e0       	ldi	r22, 0x05	; 5
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <H_PushButton_u8_PushButtonRead>:
///************_H_PushButton_u8_PushButtonRead to Read pin value  _***********//
u8 H_PushButton_u8_PushButtonRead (u8 Local_u8_PushButton)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	ec 97       	sbiw	r28, 0x3c	; 60
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_PushButtonValue = 0;
    20dc:	19 ae       	std	Y+57, r1	; 0x39
	///************_SWITCH to loop on PushButton _***********//
	switch(Local_u8_PushButton){
    20de:	8a ad       	ldd	r24, Y+58	; 0x3a
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	3c af       	std	Y+60, r19	; 0x3c
    20e6:	2b af       	std	Y+59, r18	; 0x3b
    20e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <H_PushButton_u8_PushButtonRead+0x2e>
    20f2:	a2 c0       	rjmp	.+324    	; 0x2238 <H_PushButton_u8_PushButtonRead+0x172>
    20f4:	2b ad       	ldd	r18, Y+59	; 0x3b
    20f6:	3c ad       	ldd	r19, Y+60	; 0x3c
    20f8:	23 30       	cpi	r18, 0x03	; 3
    20fa:	31 05       	cpc	r19, r1
    20fc:	34 f4       	brge	.+12     	; 0x210a <H_PushButton_u8_PushButtonRead+0x44>
    20fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    2100:	9c ad       	ldd	r25, Y+60	; 0x3c
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 05       	cpc	r25, r1
    2106:	71 f0       	breq	.+28     	; 0x2124 <H_PushButton_u8_PushButtonRead+0x5e>
    2108:	33 c2       	rjmp	.+1126   	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
    210a:	2b ad       	ldd	r18, Y+59	; 0x3b
    210c:	3c ad       	ldd	r19, Y+60	; 0x3c
    210e:	23 30       	cpi	r18, 0x03	; 3
    2110:	31 05       	cpc	r19, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <H_PushButton_u8_PushButtonRead+0x50>
    2114:	1b c1       	rjmp	.+566    	; 0x234c <H_PushButton_u8_PushButtonRead+0x286>
    2116:	8b ad       	ldd	r24, Y+59	; 0x3b
    2118:	9c ad       	ldd	r25, Y+60	; 0x3c
    211a:	84 30       	cpi	r24, 0x04	; 4
    211c:	91 05       	cpc	r25, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <H_PushButton_u8_PushButtonRead+0x5c>
    2120:	9f c1       	rjmp	.+830    	; 0x2460 <H_PushButton_u8_PushButtonRead+0x39a>
    2122:	26 c2       	rjmp	.+1100   	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
	///************_ case PushButton1 _***********//
	case PUSHBUTTON1 :
		///************_ Read PUSHBUTTON1_PIN value  _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN );
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	62 e0       	ldi	r22, 0x02	; 2
    2128:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    212c:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON1 _ ************//
		if(Local_u8_PushButtonValue == PRESSED) ///check if button is pressed
    212e:	89 ad       	ldd	r24, Y+57	; 0x39
    2130:	88 23       	and	r24, r24
    2132:	09 f0       	breq	.+2      	; 0x2136 <H_PushButton_u8_PushButtonRead+0x70>
    2134:	1d c2       	rjmp	.+1082   	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e7       	ldi	r26, 0x70	; 112
    213c:	b2 e4       	ldi	r27, 0x42	; 66
    213e:	8d ab       	std	Y+53, r24	; 0x35
    2140:	9e ab       	std	Y+54, r25	; 0x36
    2142:	af ab       	std	Y+55, r26	; 0x37
    2144:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6d a9       	ldd	r22, Y+53	; 0x35
    2148:	7e a9       	ldd	r23, Y+54	; 0x36
    214a:	8f a9       	ldd	r24, Y+55	; 0x37
    214c:	98 ad       	ldd	r25, Y+56	; 0x38
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	53 e4       	ldi	r21, 0x43	; 67
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 ab       	std	Y+49, r24	; 0x31
    2160:	9a ab       	std	Y+50, r25	; 0x32
    2162:	ab ab       	std	Y+51, r26	; 0x33
    2164:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2166:	69 a9       	ldd	r22, Y+49	; 0x31
    2168:	7a a9       	ldd	r23, Y+50	; 0x32
    216a:	8b a9       	ldd	r24, Y+51	; 0x33
    216c:	9c a9       	ldd	r25, Y+52	; 0x34
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <H_PushButton_u8_PushButtonRead+0xc2>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	98 ab       	std	Y+48, r25	; 0x30
    2184:	8f a7       	std	Y+47, r24	; 0x2f
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <H_PushButton_u8_PushButtonRead+0x140>
	else if (__tmp > 65535)
    2188:	69 a9       	ldd	r22, Y+49	; 0x31
    218a:	7a a9       	ldd	r23, Y+50	; 0x32
    218c:	8b a9       	ldd	r24, Y+51	; 0x33
    218e:	9c a9       	ldd	r25, Y+52	; 0x34
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <H_PushButton_u8_PushButtonRead+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6d a9       	ldd	r22, Y+53	; 0x35
    21a2:	7e a9       	ldd	r23, Y+54	; 0x36
    21a4:	8f a9       	ldd	r24, Y+55	; 0x37
    21a6:	98 ad       	ldd	r25, Y+56	; 0x38
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	98 ab       	std	Y+48, r25	; 0x30
    21c6:	8f a7       	std	Y+47, r24	; 0x2f
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <H_PushButton_u8_PushButtonRead+0x122>
    21ca:	89 e1       	ldi	r24, 0x19	; 25
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	9e a7       	std	Y+46, r25	; 0x2e
    21d0:	8d a7       	std	Y+45, r24	; 0x2d
    21d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    21d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <H_PushButton_u8_PushButtonRead+0x110>
    21da:	9e a7       	std	Y+46, r25	; 0x2e
    21dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	98 ab       	std	Y+48, r25	; 0x30
    21e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ea:	98 a9       	ldd	r25, Y+48	; 0x30
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <H_PushButton_u8_PushButtonRead+0x104>
    21f0:	14 c0       	rjmp	.+40     	; 0x221a <H_PushButton_u8_PushButtonRead+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	69 a9       	ldd	r22, Y+49	; 0x31
    21f4:	7a a9       	ldd	r23, Y+50	; 0x32
    21f6:	8b a9       	ldd	r24, Y+51	; 0x33
    21f8:	9c a9       	ldd	r25, Y+52	; 0x34
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	8f a5       	ldd	r24, Y+47	; 0x2f
    2208:	98 a9       	ldd	r25, Y+48	; 0x30
    220a:	9c a7       	std	Y+44, r25	; 0x2c
    220c:	8b a7       	std	Y+43, r24	; 0x2b
    220e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2210:	9c a5       	ldd	r25, Y+44	; 0x2c
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <H_PushButton_u8_PushButtonRead+0x14c>
    2216:	9c a7       	std	Y+44, r25	; 0x2c
    2218:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);      /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED)
    221a:	84 e0       	ldi	r24, 0x04	; 4
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2222:	88 23       	and	r24, r24
    2224:	09 f0       	breq	.+2      	; 0x2228 <H_PushButton_u8_PushButtonRead+0x162>
    2226:	a4 c1       	rjmp	.+840    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
	   ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON1_PORT_ID,PUSHBUTTON1_PIN ) == PRESSED);
    2228:	84 e0       	ldi	r24, 0x04	; 4
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2230:	88 23       	and	r24, r24
    2232:	d1 f3       	breq	.-12     	; 0x2228 <H_PushButton_u8_PushButtonRead+0x162>
			    //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
				Local_u8_PushButtonValue = PRESSED;
    2234:	19 ae       	std	Y+57, r1	; 0x39
    2236:	9c c1       	rjmp	.+824    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON1 **************************///

		///************_ case PushButton2 _***********//
	case PUSHBUTTON2 :
		///************_ Read PUSHBUTTON2_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID, PUSHBUTTON2_PIN);
    2238:	84 e0       	ldi	r24, 0x04	; 4
    223a:	63 e0       	ldi	r22, 0x03	; 3
    223c:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2240:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON2_ ************//
		if(Local_u8_PushButtonValue == PRESSED)    ///check if button is pressed
    2242:	89 ad       	ldd	r24, Y+57	; 0x39
    2244:	88 23       	and	r24, r24
    2246:	09 f0       	breq	.+2      	; 0x224a <H_PushButton_u8_PushButtonRead+0x184>
    2248:	93 c1       	rjmp	.+806    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e7       	ldi	r26, 0x70	; 112
    2250:	b2 e4       	ldi	r27, 0x42	; 66
    2252:	8f a3       	std	Y+39, r24	; 0x27
    2254:	98 a7       	std	Y+40, r25	; 0x28
    2256:	a9 a7       	std	Y+41, r26	; 0x29
    2258:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6f a1       	ldd	r22, Y+39	; 0x27
    225c:	78 a5       	ldd	r23, Y+40	; 0x28
    225e:	89 a5       	ldd	r24, Y+41	; 0x29
    2260:	9a a5       	ldd	r25, Y+42	; 0x2a
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8b a3       	std	Y+35, r24	; 0x23
    2274:	9c a3       	std	Y+36, r25	; 0x24
    2276:	ad a3       	std	Y+37, r26	; 0x25
    2278:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    227a:	6b a1       	ldd	r22, Y+35	; 0x23
    227c:	7c a1       	ldd	r23, Y+36	; 0x24
    227e:	8d a1       	ldd	r24, Y+37	; 0x25
    2280:	9e a1       	ldd	r25, Y+38	; 0x26
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <H_PushButton_u8_PushButtonRead+0x1d6>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9a a3       	std	Y+34, r25	; 0x22
    2298:	89 a3       	std	Y+33, r24	; 0x21
    229a:	3f c0       	rjmp	.+126    	; 0x231a <H_PushButton_u8_PushButtonRead+0x254>
	else if (__tmp > 65535)
    229c:	6b a1       	ldd	r22, Y+35	; 0x23
    229e:	7c a1       	ldd	r23, Y+36	; 0x24
    22a0:	8d a1       	ldd	r24, Y+37	; 0x25
    22a2:	9e a1       	ldd	r25, Y+38	; 0x26
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <H_PushButton_u8_PushButtonRead+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6f a1       	ldd	r22, Y+39	; 0x27
    22b6:	78 a5       	ldd	r23, Y+40	; 0x28
    22b8:	89 a5       	ldd	r24, Y+41	; 0x29
    22ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9a a3       	std	Y+34, r25	; 0x22
    22da:	89 a3       	std	Y+33, r24	; 0x21
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <H_PushButton_u8_PushButtonRead+0x236>
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	98 a3       	std	Y+32, r25	; 0x20
    22e4:	8f 8f       	std	Y+31, r24	; 0x1f
    22e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22e8:	98 a1       	ldd	r25, Y+32	; 0x20
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <H_PushButton_u8_PushButtonRead+0x224>
    22ee:	98 a3       	std	Y+32, r25	; 0x20
    22f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	89 a1       	ldd	r24, Y+33	; 0x21
    22f4:	9a a1       	ldd	r25, Y+34	; 0x22
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9a a3       	std	Y+34, r25	; 0x22
    22fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	89 a1       	ldd	r24, Y+33	; 0x21
    22fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <H_PushButton_u8_PushButtonRead+0x218>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <H_PushButton_u8_PushButtonRead+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6b a1       	ldd	r22, Y+35	; 0x23
    2308:	7c a1       	ldd	r23, Y+36	; 0x24
    230a:	8d a1       	ldd	r24, Y+37	; 0x25
    230c:	9e a1       	ldd	r25, Y+38	; 0x26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	89 a3       	std	Y+33, r24	; 0x21
    231a:	89 a1       	ldd	r24, Y+33	; 0x21
    231c:	9a a1       	ldd	r25, Y+34	; 0x22
    231e:	9e 8f       	std	Y+30, r25	; 0x1e
    2320:	8d 8f       	std	Y+29, r24	; 0x1d
    2322:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2324:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <H_PushButton_u8_PushButtonRead+0x260>
    232a:	9e 8f       	std	Y+30, r25	; 0x1e
    232c:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);        /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED)
    232e:	84 e0       	ldi	r24, 0x04	; 4
    2330:	63 e0       	ldi	r22, 0x03	; 3
    2332:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2336:	88 23       	and	r24, r24
    2338:	09 f0       	breq	.+2      	; 0x233c <H_PushButton_u8_PushButtonRead+0x276>
    233a:	1a c1       	rjmp	.+564    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
				while (M_DIO_U8_PinRead(PUSHBUTTON2_PORT_ID,PUSHBUTTON2_PIN ) == PRESSED);
    233c:	84 e0       	ldi	r24, 0x04	; 4
    233e:	63 e0       	ldi	r22, 0x03	; 3
    2340:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2344:	88 23       	and	r24, r24
    2346:	d1 f3       	breq	.-12     	; 0x233c <H_PushButton_u8_PushButtonRead+0x276>
					//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
						Local_u8_PushButtonValue = PRESSED;
    2348:	19 ae       	std	Y+57, r1	; 0x39
    234a:	12 c1       	rjmp	.+548    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
		///*****************************break case PUSHBUTTON2 **************************///

		///************_ case PushButton3 _***********//
	case PUSHBUTTON3 :
		///************_ Read PUSHBUTTON3_PIN value   _***********//
		Local_u8_PushButtonValue =	M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID, PUSHBUTTON3_PIN);
    234c:	84 e0       	ldi	r24, 0x04	; 4
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2354:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON3 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)     ///check if button is pressed
    2356:	89 ad       	ldd	r24, Y+57	; 0x39
    2358:	88 23       	and	r24, r24
    235a:	09 f0       	breq	.+2      	; 0x235e <H_PushButton_u8_PushButtonRead+0x298>
    235c:	09 c1       	rjmp	.+530    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a0 e7       	ldi	r26, 0x70	; 112
    2364:	b2 e4       	ldi	r27, 0x42	; 66
    2366:	89 8f       	std	Y+25, r24	; 0x19
    2368:	9a 8f       	std	Y+26, r25	; 0x1a
    236a:	ab 8f       	std	Y+27, r26	; 0x1b
    236c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236e:	69 8d       	ldd	r22, Y+25	; 0x19
    2370:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	4a e7       	ldi	r20, 0x7A	; 122
    237c:	53 e4       	ldi	r21, 0x43	; 67
    237e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	8d 8b       	std	Y+21, r24	; 0x15
    2388:	9e 8b       	std	Y+22, r25	; 0x16
    238a:	af 8b       	std	Y+23, r26	; 0x17
    238c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238e:	6d 89       	ldd	r22, Y+21	; 0x15
    2390:	7e 89       	ldd	r23, Y+22	; 0x16
    2392:	8f 89       	ldd	r24, Y+23	; 0x17
    2394:	98 8d       	ldd	r25, Y+24	; 0x18
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	2c f4       	brge	.+10     	; 0x23b0 <H_PushButton_u8_PushButtonRead+0x2ea>
		__ticks = 1;
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <H_PushButton_u8_PushButtonRead+0x368>
	else if (__tmp > 65535)
    23b0:	6d 89       	ldd	r22, Y+21	; 0x15
    23b2:	7e 89       	ldd	r23, Y+22	; 0x16
    23b4:	8f 89       	ldd	r24, Y+23	; 0x17
    23b6:	98 8d       	ldd	r25, Y+24	; 0x18
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	3f ef       	ldi	r19, 0xFF	; 255
    23bc:	4f e7       	ldi	r20, 0x7F	; 127
    23be:	57 e4       	ldi	r21, 0x47	; 71
    23c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	4c f5       	brge	.+82     	; 0x241a <H_PushButton_u8_PushButtonRead+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c8:	69 8d       	ldd	r22, Y+25	; 0x19
    23ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e2       	ldi	r20, 0x20	; 32
    23d6:	51 e4       	ldi	r21, 0x41	; 65
    23d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <H_PushButton_u8_PushButtonRead+0x34a>
    23f2:	89 e1       	ldi	r24, 0x19	; 25
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	9a 8b       	std	Y+18, r25	; 0x12
    23f8:	89 8b       	std	Y+17, r24	; 0x11
    23fa:	89 89       	ldd	r24, Y+17	; 0x11
    23fc:	9a 89       	ldd	r25, Y+18	; 0x12
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	f1 f7       	brne	.-4      	; 0x23fe <H_PushButton_u8_PushButtonRead+0x338>
    2402:	9a 8b       	std	Y+18, r25	; 0x12
    2404:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2406:	8b 89       	ldd	r24, Y+19	; 0x13
    2408:	9c 89       	ldd	r25, Y+20	; 0x14
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	9c 8b       	std	Y+20, r25	; 0x14
    240e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2410:	8b 89       	ldd	r24, Y+19	; 0x13
    2412:	9c 89       	ldd	r25, Y+20	; 0x14
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	69 f7       	brne	.-38     	; 0x23f2 <H_PushButton_u8_PushButtonRead+0x32c>
    2418:	14 c0       	rjmp	.+40     	; 0x2442 <H_PushButton_u8_PushButtonRead+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241a:	6d 89       	ldd	r22, Y+21	; 0x15
    241c:	7e 89       	ldd	r23, Y+22	; 0x16
    241e:	8f 89       	ldd	r24, Y+23	; 0x17
    2420:	98 8d       	ldd	r25, Y+24	; 0x18
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9c 8b       	std	Y+20, r25	; 0x14
    242c:	8b 8b       	std	Y+19, r24	; 0x13
    242e:	8b 89       	ldd	r24, Y+19	; 0x13
    2430:	9c 89       	ldd	r25, Y+20	; 0x14
    2432:	98 8b       	std	Y+16, r25	; 0x10
    2434:	8f 87       	std	Y+15, r24	; 0x0f
    2436:	8f 85       	ldd	r24, Y+15	; 0x0f
    2438:	98 89       	ldd	r25, Y+16	; 0x10
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <H_PushButton_u8_PushButtonRead+0x374>
    243e:	98 8b       	std	Y+16, r25	; 0x10
    2440:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);          /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED)
    2442:	84 e0       	ldi	r24, 0x04	; 4
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    244a:	88 23       	and	r24, r24
    244c:	09 f0       	breq	.+2      	; 0x2450 <H_PushButton_u8_PushButtonRead+0x38a>
    244e:	90 c0       	rjmp	.+288    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON3_PORT_ID,PUSHBUTTON3_PIN ) == PRESSED);
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	64 e0       	ldi	r22, 0x04	; 4
    2454:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2458:	88 23       	and	r24, r24
    245a:	d1 f3       	breq	.-12     	; 0x2450 <H_PushButton_u8_PushButtonRead+0x38a>
				//// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					Local_u8_PushButtonValue = PRESSED;
    245c:	19 ae       	std	Y+57, r1	; 0x39
    245e:	88 c0       	rjmp	.+272    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
	///*****************************break case PUSHBUTTON3 **************************///

		///************_ case PushButton4 _***********//
	case PUSHBUTTON4 :
		///************_ Read PUSHBUTTON4_PIN value   _***********//
		Local_u8_PushButtonValue = M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID, PUSHBUTTON4_PIN);
    2460:	84 e0       	ldi	r24, 0x04	; 4
    2462:	65 e0       	ldi	r22, 0x05	; 5
    2464:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    2468:	89 af       	std	Y+57, r24	; 0x39
		///********************_DEBOUNCING _ PUSHBUTTON4 _ ************//
		if(Local_u8_PushButtonValue == PRESSED)      ///check if button is pressed
    246a:	89 ad       	ldd	r24, Y+57	; 0x39
    246c:	88 23       	and	r24, r24
    246e:	09 f0       	breq	.+2      	; 0x2472 <H_PushButton_u8_PushButtonRead+0x3ac>
    2470:	7f c0       	rjmp	.+254    	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e7       	ldi	r26, 0x70	; 112
    2478:	b2 e4       	ldi	r27, 0x42	; 66
    247a:	8b 87       	std	Y+11, r24	; 0x0b
    247c:	9c 87       	std	Y+12, r25	; 0x0c
    247e:	ad 87       	std	Y+13, r26	; 0x0d
    2480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	4a e7       	ldi	r20, 0x7A	; 122
    2490:	53 e4       	ldi	r21, 0x43	; 67
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8f 83       	std	Y+7, r24	; 0x07
    249c:	98 87       	std	Y+8, r25	; 0x08
    249e:	a9 87       	std	Y+9, r26	; 0x09
    24a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <H_PushButton_u8_PushButtonRead+0x3fe>
		__ticks = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <H_PushButton_u8_PushButtonRead+0x47c>
	else if (__tmp > 65535)
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	3f ef       	ldi	r19, 0xFF	; 255
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	57 e4       	ldi	r21, 0x47	; 71
    24d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d8:	18 16       	cp	r1, r24
    24da:	4c f5       	brge	.+82     	; 0x252e <H_PushButton_u8_PushButtonRead+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e2       	ldi	r20, 0x20	; 32
    24ea:	51 e4       	ldi	r21, 0x41	; 65
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	0f c0       	rjmp	.+30     	; 0x2524 <H_PushButton_u8_PushButtonRead+0x45e>
    2506:	89 e1       	ldi	r24, 0x19	; 25
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <H_PushButton_u8_PushButtonRead+0x44c>
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	69 f7       	brne	.-38     	; 0x2506 <H_PushButton_u8_PushButtonRead+0x440>
    252c:	14 c0       	rjmp	.+40     	; 0x2556 <H_PushButton_u8_PushButtonRead+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <H_PushButton_u8_PushButtonRead+0x488>
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(PUSHBUTTONS_DEBOUNCING_TIME);         /// delay for 60 Ms
			 ////check  M_DIO_U8_PinRead value
			if(M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED)
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	65 e0       	ldi	r22, 0x05	; 5
    255a:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    255e:	88 23       	and	r24, r24
    2560:	39 f4       	brne	.+14     	; 0x2570 <H_PushButton_u8_PushButtonRead+0x4aa>
			{
		 ///while loop to stop repeated actions when PRESSED then take an action when released
			while (M_DIO_U8_PinRead(PUSHBUTTON4_PORT_ID,PUSHBUTTON4_PIN ) == PRESSED);
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	65 e0       	ldi	r22, 0x05	; 5
    2566:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    256a:	88 23       	and	r24, r24
    256c:	d1 f3       	breq	.-12     	; 0x2562 <H_PushButton_u8_PushButtonRead+0x49c>
				 //// if while is  true  Local_u8_PushButtonValue ==  PRESSED
					  Local_u8_PushButtonValue = PRESSED;
    256e:	19 ae       	std	Y+57, r1	; 0x39

	default :   /********do nothing******/ break;
	///************_ End of switch(Local_u8_PushButton)_********//
	}

	return Local_u8_PushButtonValue  ;
    2570:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2572:	ec 96       	adiw	r28, 0x3c	; 60
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <H_LED_Void_LedInit>:
#include "LED_Int.h"
#include "LED_Priv.h"

///******************_Initialization Function to Set Pins direction_***********///
void H_LED_Void_LedInit(u8 Local_u8_ledId)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <H_LED_Void_LedInit+0x6>
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_ledId)
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	3b 83       	std	Y+3, r19	; 0x03
    259a:	2a 83       	std	Y+2, r18	; 0x02
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	82 30       	cpi	r24, 0x02	; 2
    25a2:	91 05       	cpc	r25, r1
    25a4:	11 f1       	breq	.+68     	; 0x25ea <H_LED_Void_LedInit+0x66>
    25a6:	2a 81       	ldd	r18, Y+2	; 0x02
    25a8:	3b 81       	ldd	r19, Y+3	; 0x03
    25aa:	23 30       	cpi	r18, 0x03	; 3
    25ac:	31 05       	cpc	r19, r1
    25ae:	34 f4       	brge	.+12     	; 0x25bc <H_LED_Void_LedInit+0x38>
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	91 05       	cpc	r25, r1
    25b8:	61 f0       	breq	.+24     	; 0x25d2 <H_LED_Void_LedInit+0x4e>
    25ba:	22 c0       	rjmp	.+68     	; 0x2600 <H_LED_Void_LedInit+0x7c>
    25bc:	2a 81       	ldd	r18, Y+2	; 0x02
    25be:	3b 81       	ldd	r19, Y+3	; 0x03
    25c0:	23 30       	cpi	r18, 0x03	; 3
    25c2:	31 05       	cpc	r19, r1
    25c4:	61 f0       	breq	.+24     	; 0x25de <H_LED_Void_LedInit+0x5a>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	84 30       	cpi	r24, 0x04	; 4
    25cc:	91 05       	cpc	r25, r1
    25ce:	99 f0       	breq	.+38     	; 0x25f6 <H_LED_Void_LedInit+0x72>
    25d0:	17 c0       	rjmp	.+46     	; 0x2600 <H_LED_Void_LedInit+0x7c>
	{
	///******_Setting RED_LED Pin direction to OUTPUT _***********///
	case RED_LED:
		M_DIO_void_SetPinDirection(RED_LED_PORT, RED_LED_PIN, OUTPUT);
    25d2:	83 e0       	ldi	r24, 0x03	; 3
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    25dc:	11 c0       	rjmp	.+34     	; 0x2600 <H_LED_Void_LedInit+0x7c>
		break;
	///******_Setting GRN_LED Pin direction to OUTPUT _***********///
	case GRN_LED :
		M_DIO_void_SetPinDirection(GRN_LED_PORT ,GRN_LED_PIN , OUTPUT);
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	61 e0       	ldi	r22, 0x01	; 1
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    25e8:	0b c0       	rjmp	.+22     	; 0x2600 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting BLUE_LED Pin direction to OUTPUT _***********///
	case BLUE_LED:
		M_DIO_void_SetPinDirection(BLUE_LED_PORT,BLUE_LED_PIN ,OUTPUT);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <H_LED_Void_LedInit+0x7c>
		break;
   ///******_Setting YELLOW_LED Pin direction to OUTPUT _***********///
	case YELLOW_LED:
			M_DIO_void_SetPinDirection(YELLOW_LED_PORT,YELLOW_LED_PIN ,OUTPUT);
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	63 e0       	ldi	r22, 0x03	; 3
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
			break;
	default :               /*****error*****/                      break;
	}

}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <H_LED_Void_LedOn>:
void H_LED_Void_LedOn(u8 Local_u8_led)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <H_LED_Void_LedOn+0x6>
    2612:	0f 92       	push	r0
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	3b 83       	std	Y+3, r19	; 0x03
    2622:	2a 83       	std	Y+2, r18	; 0x02
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	91 05       	cpc	r25, r1
    262c:	11 f1       	breq	.+68     	; 0x2672 <H_LED_Void_LedOn+0x66>
    262e:	2a 81       	ldd	r18, Y+2	; 0x02
    2630:	3b 81       	ldd	r19, Y+3	; 0x03
    2632:	23 30       	cpi	r18, 0x03	; 3
    2634:	31 05       	cpc	r19, r1
    2636:	34 f4       	brge	.+12     	; 0x2644 <H_LED_Void_LedOn+0x38>
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	91 05       	cpc	r25, r1
    2640:	61 f0       	breq	.+24     	; 0x265a <H_LED_Void_LedOn+0x4e>
    2642:	22 c0       	rjmp	.+68     	; 0x2688 <H_LED_Void_LedOn+0x7c>
    2644:	2a 81       	ldd	r18, Y+2	; 0x02
    2646:	3b 81       	ldd	r19, Y+3	; 0x03
    2648:	23 30       	cpi	r18, 0x03	; 3
    264a:	31 05       	cpc	r19, r1
    264c:	61 f0       	breq	.+24     	; 0x2666 <H_LED_Void_LedOn+0x5a>
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	9b 81       	ldd	r25, Y+3	; 0x03
    2652:	84 30       	cpi	r24, 0x04	; 4
    2654:	91 05       	cpc	r25, r1
    2656:	99 f0       	breq	.+38     	; 0x267e <H_LED_Void_LedOn+0x72>
    2658:	17 c0       	rjmp	.+46     	; 0x2688 <H_LED_Void_LedOn+0x7c>
		{
	    ///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
		case RED_LED:
             M_DIO_void_SetPinValue(RED_LED_PORT, RED_LED_PIN, HIGH);
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2664:	11 c0       	rjmp	.+34     	; 0x2688 <H_LED_Void_LedOn+0x7c>
		break;
		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
		case GRN_LED :
             M_DIO_void_SetPinValue(GRN_LED_PORT, GRN_LED_PIN, HIGH);
    2666:	83 e0       	ldi	r24, 0x03	; 3
    2668:	61 e0       	ldi	r22, 0x01	; 1
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <H_LED_Void_LedOn+0x7c>
        break;
        ///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
		case BLUE_LED :
             M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    267c:	05 c0       	rjmp	.+10     	; 0x2688 <H_LED_Void_LedOn+0x7c>
   		break;
   		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
		case YELLOW_LED :
		             M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    267e:	83 e0       	ldi	r24, 0x03	; 3
    2680:	63 e0       	ldi	r22, 0x03	; 3
    2682:	41 e0       	ldi	r20, 0x01	; 1
    2684:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		   		break;
		default :          /*****error*****/         break;
		}

}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <H_LED_Void_LedOff>:
void H_LED_Void_LedOff(u8 Local_u8_led)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	00 d0       	rcall	.+0      	; 0x269a <H_LED_Void_LedOff+0x6>
    269a:	0f 92       	push	r0
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	3b 83       	std	Y+3, r19	; 0x03
    26aa:	2a 83       	std	Y+2, r18	; 0x02
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	91 05       	cpc	r25, r1
    26b4:	b1 f0       	breq	.+44     	; 0x26e2 <H_LED_Void_LedOff+0x4e>
    26b6:	2a 81       	ldd	r18, Y+2	; 0x02
    26b8:	3b 81       	ldd	r19, Y+3	; 0x03
    26ba:	23 30       	cpi	r18, 0x03	; 3
    26bc:	31 05       	cpc	r19, r1
    26be:	34 f4       	brge	.+12     	; 0x26cc <H_LED_Void_LedOff+0x38>
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	9b 81       	ldd	r25, Y+3	; 0x03
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	91 05       	cpc	r25, r1
    26c8:	91 f0       	breq	.+36     	; 0x26ee <H_LED_Void_LedOff+0x5a>
    26ca:	22 c0       	rjmp	.+68     	; 0x2710 <H_LED_Void_LedOff+0x7c>
    26cc:	2a 81       	ldd	r18, Y+2	; 0x02
    26ce:	3b 81       	ldd	r19, Y+3	; 0x03
    26d0:	23 30       	cpi	r18, 0x03	; 3
    26d2:	31 05       	cpc	r19, r1
    26d4:	91 f0       	breq	.+36     	; 0x26fa <H_LED_Void_LedOff+0x66>
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	84 30       	cpi	r24, 0x04	; 4
    26dc:	91 05       	cpc	r25, r1
    26de:	99 f0       	breq	.+38     	; 0x2706 <H_LED_Void_LedOff+0x72>
    26e0:	17 c0       	rjmp	.+46     	; 0x2710 <H_LED_Void_LedOff+0x7c>
			{
			///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
			case BLUE_LED:
				M_DIO_void_SetPinValue(BLUE_LED_PORT, BLUE_LED_PIN, LOW);
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    26ec:	11 c0       	rjmp	.+34     	; 0x2710 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			case RED_LED :
				M_DIO_void_SetPinValue(RED_LED_PORT ,RED_LED_PIN, LOW);
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    26f8:	0b c0       	rjmp	.+22     	; 0x2710 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
			case GRN_LED :
				M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	61 e0       	ldi	r22, 0x01	; 1
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <H_LED_Void_LedOff+0x7c>
			break;
			///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
			case YELLOW_LED :
			    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	63 e0       	ldi	r22, 0x03	; 3
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
					   		break;
			default :           /*****error*****/         break;
			}

}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <H_LED_Void_LedTogg>:
void H_LED_Void_LedTogg(u8 Local_u8_led)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	00 d0       	rcall	.+0      	; 0x2722 <H_LED_Void_LedTogg+0x6>
    2722:	0f 92       	push	r0
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	89 83       	std	Y+1, r24	; 0x01
	///***switch case to loop on LEDs****//
	switch(Local_u8_led)
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3b 83       	std	Y+3, r19	; 0x03
    2732:	2a 83       	std	Y+2, r18	; 0x02
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	91 05       	cpc	r25, r1
    273c:	b1 f0       	breq	.+44     	; 0x276a <H_LED_Void_LedTogg+0x4e>
    273e:	2a 81       	ldd	r18, Y+2	; 0x02
    2740:	3b 81       	ldd	r19, Y+3	; 0x03
    2742:	23 30       	cpi	r18, 0x03	; 3
    2744:	31 05       	cpc	r19, r1
    2746:	34 f4       	brge	.+12     	; 0x2754 <H_LED_Void_LedTogg+0x38>
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	9b 81       	ldd	r25, Y+3	; 0x03
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	91 05       	cpc	r25, r1
    2750:	89 f0       	breq	.+34     	; 0x2774 <H_LED_Void_LedTogg+0x58>
    2752:	1e c0       	rjmp	.+60     	; 0x2790 <H_LED_Void_LedTogg+0x74>
    2754:	2a 81       	ldd	r18, Y+2	; 0x02
    2756:	3b 81       	ldd	r19, Y+3	; 0x03
    2758:	23 30       	cpi	r18, 0x03	; 3
    275a:	31 05       	cpc	r19, r1
    275c:	81 f0       	breq	.+32     	; 0x277e <H_LED_Void_LedTogg+0x62>
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	84 30       	cpi	r24, 0x04	; 4
    2764:	91 05       	cpc	r25, r1
    2766:	81 f0       	breq	.+32     	; 0x2788 <H_LED_Void_LedTogg+0x6c>
    2768:	13 c0       	rjmp	.+38     	; 0x2790 <H_LED_Void_LedTogg+0x74>
		{
		  ///******_ Toggle  BLUE_LED Pin Value _***********///
		  case BLUE_LED:
			  M_DIO_void_PinTog(BLUE_LED_PORT, BLUE_LED_PIN);
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	0e 94 6f 09 	call	0x12de	; 0x12de <M_DIO_void_PinTog>
    2772:	0e c0       	rjmp	.+28     	; 0x2790 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  RED_LED Pin Value _******************///
		  case RED_LED :
			  M_DIO_void_PinTog(RED_LED_PORT, RED_LED_PIN);
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	0e 94 6f 09 	call	0x12de	; 0x12de <M_DIO_void_PinTog>
    277c:	09 c0       	rjmp	.+18     	; 0x2790 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  GRN_LED Pin Value _******************///
		  case GRN_LED :
			  M_DIO_void_PinTog(GRN_LED_PORT, GRN_LED_PIN);
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	61 e0       	ldi	r22, 0x01	; 1
    2782:	0e 94 6f 09 	call	0x12de	; 0x12de <M_DIO_void_PinTog>
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <H_LED_Void_LedTogg+0x74>
		  break;
		  ///******_ Toggle  YELLOW_LED Pin Value _******************///
		  case YELLOW_LED :
			  M_DIO_void_PinTog(YELLOW_LED_PORT,YELLOW_LED_PIN);
    2788:	83 e0       	ldi	r24, 0x03	; 3
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	0e 94 6f 09 	call	0x12de	; 0x12de <M_DIO_void_PinTog>
		  break;

		  default :   /*****error*****/          break;
		}

}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <H_LED_Void_LedBlink>:
void H_LED_Void_LedBlink(u8 Local_u8_led)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	eb 97       	sbiw	r28, 0x3b	; 59
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	89 af       	std	Y+57, r24	; 0x39
	///***switch case to loop on LEDs****//
     switch(Local_u8_led)
    27b2:	89 ad       	ldd	r24, Y+57	; 0x39
    27b4:	28 2f       	mov	r18, r24
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	3b af       	std	Y+59, r19	; 0x3b
    27ba:	2a af       	std	Y+58, r18	; 0x3a
    27bc:	8a ad       	ldd	r24, Y+58	; 0x3a
    27be:	9b ad       	ldd	r25, Y+59	; 0x3b
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	91 05       	cpc	r25, r1
    27c4:	c9 f0       	breq	.+50     	; 0x27f8 <H_LED_Void_LedBlink+0x5c>
    27c6:	2a ad       	ldd	r18, Y+58	; 0x3a
    27c8:	3b ad       	ldd	r19, Y+59	; 0x3b
    27ca:	23 30       	cpi	r18, 0x03	; 3
    27cc:	31 05       	cpc	r19, r1
    27ce:	3c f4       	brge	.+14     	; 0x27de <H_LED_Void_LedBlink+0x42>
    27d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    27d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	91 05       	cpc	r25, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <H_LED_Void_LedBlink+0x40>
    27da:	8b c0       	rjmp	.+278    	; 0x28f2 <H_LED_Void_LedBlink+0x156>
    27dc:	00 c2       	rjmp	.+1024   	; 0x2bde <H_LED_Void_LedBlink+0x442>
    27de:	2a ad       	ldd	r18, Y+58	; 0x3a
    27e0:	3b ad       	ldd	r19, Y+59	; 0x3b
    27e2:	23 30       	cpi	r18, 0x03	; 3
    27e4:	31 05       	cpc	r19, r1
    27e6:	09 f4       	brne	.+2      	; 0x27ea <H_LED_Void_LedBlink+0x4e>
    27e8:	01 c1       	rjmp	.+514    	; 0x29ec <H_LED_Void_LedBlink+0x250>
    27ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    27ec:	9b ad       	ldd	r25, Y+59	; 0x3b
    27ee:	84 30       	cpi	r24, 0x04	; 4
    27f0:	91 05       	cpc	r25, r1
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <H_LED_Void_LedBlink+0x5a>
    27f4:	78 c1       	rjmp	.+752    	; 0x2ae6 <H_LED_Void_LedBlink+0x34a>
    27f6:	f3 c1       	rjmp	.+998    	; 0x2bde <H_LED_Void_LedBlink+0x442>
	 	{
        ///******_ Blink  BLUE_LED Pin Value _******************///
	 	case BLUE_LED:
	 		///******_Setting BLUE_LED Pin Value to HIGH to Light it_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, HIGH);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e5       	ldi	r25, 0x50	; 80
    2806:	a3 ec       	ldi	r26, 0xC3	; 195
    2808:	b7 e4       	ldi	r27, 0x47	; 71
    280a:	8d ab       	std	Y+53, r24	; 0x35
    280c:	9e ab       	std	Y+54, r25	; 0x36
    280e:	af ab       	std	Y+55, r26	; 0x37
    2810:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6d a9       	ldd	r22, Y+53	; 0x35
    2814:	7e a9       	ldd	r23, Y+54	; 0x36
    2816:	8f a9       	ldd	r24, Y+55	; 0x37
    2818:	98 ad       	ldd	r25, Y+56	; 0x38
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a e7       	ldi	r20, 0x7A	; 122
    2820:	53 e4       	ldi	r21, 0x43	; 67
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	89 ab       	std	Y+49, r24	; 0x31
    282c:	9a ab       	std	Y+50, r25	; 0x32
    282e:	ab ab       	std	Y+51, r26	; 0x33
    2830:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2832:	69 a9       	ldd	r22, Y+49	; 0x31
    2834:	7a a9       	ldd	r23, Y+50	; 0x32
    2836:	8b a9       	ldd	r24, Y+51	; 0x33
    2838:	9c a9       	ldd	r25, Y+52	; 0x34
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <H_LED_Void_LedBlink+0xb8>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	98 ab       	std	Y+48, r25	; 0x30
    2850:	8f a7       	std	Y+47, r24	; 0x2f
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <H_LED_Void_LedBlink+0x136>
	else if (__tmp > 65535)
    2854:	69 a9       	ldd	r22, Y+49	; 0x31
    2856:	7a a9       	ldd	r23, Y+50	; 0x32
    2858:	8b a9       	ldd	r24, Y+51	; 0x33
    285a:	9c a9       	ldd	r25, Y+52	; 0x34
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <H_LED_Void_LedBlink+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6d a9       	ldd	r22, Y+53	; 0x35
    286e:	7e a9       	ldd	r23, Y+54	; 0x36
    2870:	8f a9       	ldd	r24, Y+55	; 0x37
    2872:	98 ad       	ldd	r25, Y+56	; 0x38
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	98 ab       	std	Y+48, r25	; 0x30
    2892:	8f a7       	std	Y+47, r24	; 0x2f
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <H_LED_Void_LedBlink+0x118>
    2896:	89 e1       	ldi	r24, 0x19	; 25
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9e a7       	std	Y+46, r25	; 0x2e
    289c:	8d a7       	std	Y+45, r24	; 0x2d
    289e:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <H_LED_Void_LedBlink+0x106>
    28a6:	9e a7       	std	Y+46, r25	; 0x2e
    28a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	98 ab       	std	Y+48, r25	; 0x30
    28b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b6:	98 a9       	ldd	r25, Y+48	; 0x30
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <H_LED_Void_LedBlink+0xfa>
    28bc:	14 c0       	rjmp	.+40     	; 0x28e6 <H_LED_Void_LedBlink+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	69 a9       	ldd	r22, Y+49	; 0x31
    28c0:	7a a9       	ldd	r23, Y+50	; 0x32
    28c2:	8b a9       	ldd	r24, Y+51	; 0x33
    28c4:	9c a9       	ldd	r25, Y+52	; 0x34
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d4:	98 a9       	ldd	r25, Y+48	; 0x30
    28d6:	9c a7       	std	Y+44, r25	; 0x2c
    28d8:	8b a7       	std	Y+43, r24	; 0x2b
    28da:	8b a5       	ldd	r24, Y+43	; 0x2b
    28dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <H_LED_Void_LedBlink+0x142>
    28e2:	9c a7       	std	Y+44, r25	; 0x2c
    28e4:	8b a7       	std	Y+43, r24	; 0x2b
	 		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
	 		///******_Setting BLUE_LED Pin Value to LOW to Turn it OFF_***********///
	 		M_DIO_void_SetPinValue(BLUE_LED_PORT,BLUE_LED_PIN, LOW);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	40 e0       	ldi	r20, 0x00	; 0
    28ec:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    28f0:	76 c1       	rjmp	.+748    	; 0x2bde <H_LED_Void_LedBlink+0x442>
	 	break;
	    ///******_ Blink  RED_LED Pin Value _******************///
		case RED_LED :
			///******_Setting RED_LED Pin Value to HIGH to Light it_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, HIGH);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e5       	ldi	r25, 0x50	; 80
    2900:	a3 ec       	ldi	r26, 0xC3	; 195
    2902:	b7 e4       	ldi	r27, 0x47	; 71
    2904:	8f a3       	std	Y+39, r24	; 0x27
    2906:	98 a7       	std	Y+40, r25	; 0x28
    2908:	a9 a7       	std	Y+41, r26	; 0x29
    290a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6f a1       	ldd	r22, Y+39	; 0x27
    290e:	78 a5       	ldd	r23, Y+40	; 0x28
    2910:	89 a5       	ldd	r24, Y+41	; 0x29
    2912:	9a a5       	ldd	r25, Y+42	; 0x2a
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	53 e4       	ldi	r21, 0x43	; 67
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8b a3       	std	Y+35, r24	; 0x23
    2926:	9c a3       	std	Y+36, r25	; 0x24
    2928:	ad a3       	std	Y+37, r26	; 0x25
    292a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    292c:	6b a1       	ldd	r22, Y+35	; 0x23
    292e:	7c a1       	ldd	r23, Y+36	; 0x24
    2930:	8d a1       	ldd	r24, Y+37	; 0x25
    2932:	9e a1       	ldd	r25, Y+38	; 0x26
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <H_LED_Void_LedBlink+0x1b2>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9a a3       	std	Y+34, r25	; 0x22
    294a:	89 a3       	std	Y+33, r24	; 0x21
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <H_LED_Void_LedBlink+0x230>
	else if (__tmp > 65535)
    294e:	6b a1       	ldd	r22, Y+35	; 0x23
    2950:	7c a1       	ldd	r23, Y+36	; 0x24
    2952:	8d a1       	ldd	r24, Y+37	; 0x25
    2954:	9e a1       	ldd	r25, Y+38	; 0x26
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <H_LED_Void_LedBlink+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6f a1       	ldd	r22, Y+39	; 0x27
    2968:	78 a5       	ldd	r23, Y+40	; 0x28
    296a:	89 a5       	ldd	r24, Y+41	; 0x29
    296c:	9a a5       	ldd	r25, Y+42	; 0x2a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9a a3       	std	Y+34, r25	; 0x22
    298c:	89 a3       	std	Y+33, r24	; 0x21
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <H_LED_Void_LedBlink+0x212>
    2990:	89 e1       	ldi	r24, 0x19	; 25
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 a3       	std	Y+32, r25	; 0x20
    2996:	8f 8f       	std	Y+31, r24	; 0x1f
    2998:	8f 8d       	ldd	r24, Y+31	; 0x1f
    299a:	98 a1       	ldd	r25, Y+32	; 0x20
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <H_LED_Void_LedBlink+0x200>
    29a0:	98 a3       	std	Y+32, r25	; 0x20
    29a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	89 a1       	ldd	r24, Y+33	; 0x21
    29a6:	9a a1       	ldd	r25, Y+34	; 0x22
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9a a3       	std	Y+34, r25	; 0x22
    29ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	89 a1       	ldd	r24, Y+33	; 0x21
    29b0:	9a a1       	ldd	r25, Y+34	; 0x22
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <H_LED_Void_LedBlink+0x1f4>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <H_LED_Void_LedBlink+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ba:	7c a1       	ldd	r23, Y+36	; 0x24
    29bc:	8d a1       	ldd	r24, Y+37	; 0x25
    29be:	9e a1       	ldd	r25, Y+38	; 0x26
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9a a3       	std	Y+34, r25	; 0x22
    29ca:	89 a3       	std	Y+33, r24	; 0x21
    29cc:	89 a1       	ldd	r24, Y+33	; 0x21
    29ce:	9a a1       	ldd	r25, Y+34	; 0x22
    29d0:	9e 8f       	std	Y+30, r25	; 0x1e
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d
    29d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <H_LED_Void_LedBlink+0x23c>
    29dc:	9e 8f       	std	Y+30, r25	; 0x1e
    29de:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(LED_DELAY_TIME); //delay for 10000ms
			///******_Setting RED_LED Pin Value to LOW to Turn it OFF_***********///
			M_DIO_void_SetPinValue( RED_LED_PORT,RED_LED_PIN, LOW);
    29e0:	83 e0       	ldi	r24, 0x03	; 3
    29e2:	60 e0       	ldi	r22, 0x00	; 0
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    29ea:	f9 c0       	rjmp	.+498    	; 0x2bde <H_LED_Void_LedBlink+0x442>
		break;
		///******_ Blink  GRN_LED Pin Value _******************///
     	case GRN_LED :
     		///******_Setting GRN_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, HIGH);
    29ec:	83 e0       	ldi	r24, 0x03	; 3
    29ee:	61 e0       	ldi	r22, 0x01	; 1
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e5       	ldi	r25, 0x50	; 80
    29fa:	a3 ec       	ldi	r26, 0xC3	; 195
    29fc:	b7 e4       	ldi	r27, 0x47	; 71
    29fe:	89 8f       	std	Y+25, r24	; 0x19
    2a00:	9a 8f       	std	Y+26, r25	; 0x1a
    2a02:	ab 8f       	std	Y+27, r26	; 0x1b
    2a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a06:	69 8d       	ldd	r22, Y+25	; 0x19
    2a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a e7       	ldi	r20, 0x7A	; 122
    2a14:	53 e4       	ldi	r21, 0x43	; 67
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8d 8b       	std	Y+21, r24	; 0x15
    2a20:	9e 8b       	std	Y+22, r25	; 0x16
    2a22:	af 8b       	std	Y+23, r26	; 0x17
    2a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a26:	6d 89       	ldd	r22, Y+21	; 0x15
    2a28:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	2c f4       	brge	.+10     	; 0x2a48 <H_LED_Void_LedBlink+0x2ac>
		__ticks = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
    2a46:	3f c0       	rjmp	.+126    	; 0x2ac6 <H_LED_Void_LedBlink+0x32a>
	else if (__tmp > 65535)
    2a48:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	3f ef       	ldi	r19, 0xFF	; 255
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	57 e4       	ldi	r21, 0x47	; 71
    2a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	4c f5       	brge	.+82     	; 0x2ab2 <H_LED_Void_LedBlink+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a60:	69 8d       	ldd	r22, Y+25	; 0x19
    2a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e2       	ldi	r20, 0x20	; 32
    2a6e:	51 e4       	ldi	r21, 0x41	; 65
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9c 8b       	std	Y+20, r25	; 0x14
    2a86:	8b 8b       	std	Y+19, r24	; 0x13
    2a88:	0f c0       	rjmp	.+30     	; 0x2aa8 <H_LED_Void_LedBlink+0x30c>
    2a8a:	89 e1       	ldi	r24, 0x19	; 25
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9a 8b       	std	Y+18, r25	; 0x12
    2a90:	89 8b       	std	Y+17, r24	; 0x11
    2a92:	89 89       	ldd	r24, Y+17	; 0x11
    2a94:	9a 89       	ldd	r25, Y+18	; 0x12
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <H_LED_Void_LedBlink+0x2fa>
    2a9a:	9a 8b       	std	Y+18, r25	; 0x12
    2a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	9c 8b       	std	Y+20, r25	; 0x14
    2aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	69 f7       	brne	.-38     	; 0x2a8a <H_LED_Void_LedBlink+0x2ee>
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <H_LED_Void_LedBlink+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	8b 8b       	std	Y+19, r24	; 0x13
    2ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aca:	98 8b       	std	Y+16, r25	; 0x10
    2acc:	8f 87       	std	Y+15, r24	; 0x0f
    2ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad0:	98 89       	ldd	r25, Y+16	; 0x10
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <H_LED_Void_LedBlink+0x336>
    2ad6:	98 8b       	std	Y+16, r25	; 0x10
    2ad8:	8f 87       	std	Y+15, r24	; 0x0f
     		_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
     		///******_Setting GRN_LED Pin Value to LOW to Turn it OFF_***********///
     		M_DIO_void_SetPinValue(GRN_LED_PORT,GRN_LED_PIN, LOW);
    2ada:	83 e0       	ldi	r24, 0x03	; 3
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2ae4:	7c c0       	rjmp	.+248    	; 0x2bde <H_LED_Void_LedBlink+0x442>
     	break;

     	///******_ Blink  YELLOW_LED Pin Value _******************///
     	case YELLOW_LED :
		///******_Setting YELLOW_LED Pin Value to HIGH to Light it_***********///
     		M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, HIGH);
    2ae6:	83 e0       	ldi	r24, 0x03	; 3
    2ae8:	63 e0       	ldi	r22, 0x03	; 3
    2aea:	41 e0       	ldi	r20, 0x01	; 1
    2aec:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e5       	ldi	r25, 0x50	; 80
    2af4:	a3 ec       	ldi	r26, 0xC3	; 195
    2af6:	b7 e4       	ldi	r27, 0x47	; 71
    2af8:	8b 87       	std	Y+11, r24	; 0x0b
    2afa:	9c 87       	std	Y+12, r25	; 0x0c
    2afc:	ad 87       	std	Y+13, r26	; 0x0d
    2afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	4a e7       	ldi	r20, 0x7A	; 122
    2b0e:	53 e4       	ldi	r21, 0x43	; 67
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	8f 83       	std	Y+7, r24	; 0x07
    2b1a:	98 87       	std	Y+8, r25	; 0x08
    2b1c:	a9 87       	std	Y+9, r26	; 0x09
    2b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <H_LED_Void_LedBlink+0x3a6>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	3f c0       	rjmp	.+126    	; 0x2bc0 <H_LED_Void_LedBlink+0x424>
	else if (__tmp > 65535)
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	4c f5       	brge	.+82     	; 0x2bac <H_LED_Void_LedBlink+0x410>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <H_LED_Void_LedBlink+0x406>
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9c 83       	std	Y+4, r25	; 0x04
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <H_LED_Void_LedBlink+0x3f4>
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <H_LED_Void_LedBlink+0x3e8>
    2baa:	14 c0       	rjmp	.+40     	; 0x2bd4 <H_LED_Void_LedBlink+0x438>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	9a 83       	std	Y+2, r25	; 0x02
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <H_LED_Void_LedBlink+0x430>
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(LED_DELAY_TIME);  //delay for 10000ms
		///******_Setting YELLOW_LED Pin Value to LOW to Turn it OFF_***********///
		    M_DIO_void_SetPinValue(YELLOW_LED_PORT,YELLOW_LED_PIN, LOW);
    2bd4:	83 e0       	ldi	r24, 0x03	; 3
    2bd6:	63 e0       	ldi	r22, 0x03	; 3
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
		break;


		default :   /*****error*****/    break;

}    	}
    2bde:	eb 96       	adiw	r28, 0x3b	; 59
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <H_LCD_Void_LCDInt>:

/// ***************MACROS************//
/// **************FUNCTIONS********//

void H_LCD_Void_LCDInt(void)
{
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	2e 97       	sbiw	r28, 0x0e	; 14
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON


#elif  LCD_MODE == Activate_4_bit_mode   ///****4_bit_mode**********///
	///**SetPinDirection for LCD_DATA_PINS from LCD_DATA4 to LCD_DATA7 to OUTPUT////
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA4_PIN,OUTPUT ); ///LCD_DATA4_PIN
    2c04:	82 e0       	ldi	r24, 0x02	; 2
    2c06:	64 e0       	ldi	r22, 0x04	; 4
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA5_PIN,OUTPUT ); ///LCD_DATA5_PIN
    2c0e:	82 e0       	ldi	r24, 0x02	; 2
    2c10:	65 e0       	ldi	r22, 0x05	; 5
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA6_PIN,OUTPUT ); ///LCD_DATA6_PIN
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	66 e0       	ldi	r22, 0x06	; 6
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(PORTB_ID,LCD_DATA7_PIN,OUTPUT ); ///LCD_DATA7_PIN
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	67 e0       	ldi	r22, 0x07	; 7
    2c26:	41 e0       	ldi	r20, 0x01	; 1
    2c28:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT );
    2c2c:	84 e0       	ldi	r24, 0x04	; 4
    2c2e:	67 e0       	ldi	r22, 0x07	; 7
    2c30:	41 e0       	ldi	r20, 0x01	; 1
    2c32:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	///**SetPinDirection for LCD_EN_PIN to OUTPUT////
	M_DIO_void_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT );
    2c36:	84 e0       	ldi	r24, 0x04	; 4
    2c38:	66 e0       	ldi	r22, 0x06	; 6
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e4       	ldi	r25, 0x40	; 64
    2c44:	ac e1       	ldi	r26, 0x1C	; 28
    2c46:	b6 e4       	ldi	r27, 0x46	; 70
    2c48:	8b 87       	std	Y+11, r24	; 0x0b
    2c4a:	9c 87       	std	Y+12, r25	; 0x0c
    2c4c:	ad 87       	std	Y+13, r26	; 0x0d
    2c4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	4a e7       	ldi	r20, 0x7A	; 122
    2c5e:	53 e4       	ldi	r21, 0x43	; 67
    2c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	8f 83       	std	Y+7, r24	; 0x07
    2c6a:	98 87       	std	Y+8, r25	; 0x08
    2c6c:	a9 87       	std	Y+9, r26	; 0x09
    2c6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c70:	6f 81       	ldd	r22, Y+7	; 0x07
    2c72:	78 85       	ldd	r23, Y+8	; 0x08
    2c74:	89 85       	ldd	r24, Y+9	; 0x09
    2c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	40 e8       	ldi	r20, 0x80	; 128
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c84:	88 23       	and	r24, r24
    2c86:	2c f4       	brge	.+10     	; 0x2c92 <H_LCD_Void_LCDInt+0xa2>
		__ticks = 1;
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	9e 83       	std	Y+6, r25	; 0x06
    2c8e:	8d 83       	std	Y+5, r24	; 0x05
    2c90:	3f c0       	rjmp	.+126    	; 0x2d10 <H_LCD_Void_LCDInt+0x120>
	else if (__tmp > 65535)
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	3f ef       	ldi	r19, 0xFF	; 255
    2c9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ca0:	57 e4       	ldi	r21, 0x47	; 71
    2ca2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca6:	18 16       	cp	r1, r24
    2ca8:	4c f5       	brge	.+82     	; 0x2cfc <H_LCD_Void_LCDInt+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e2       	ldi	r20, 0x20	; 32
    2cb8:	51 e4       	ldi	r21, 0x41	; 65
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9e 83       	std	Y+6, r25	; 0x06
    2cd0:	8d 83       	std	Y+5, r24	; 0x05
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <H_LCD_Void_LCDInt+0x102>
    2cd4:	89 e1       	ldi	r24, 0x19	; 25
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cde:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <H_LCD_Void_LCDInt+0xf0>
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	9e 83       	std	Y+6, r25	; 0x06
    2cf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	69 f7       	brne	.-38     	; 0x2cd4 <H_LCD_Void_LCDInt+0xe4>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <H_LCD_Void_LCDInt+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9e 83       	std	Y+6, r25	; 0x06
    2d0e:	8d 83       	std	Y+5, r24	; 0x05
    2d10:	8d 81       	ldd	r24, Y+5	; 0x05
    2d12:	9e 81       	ldd	r25, Y+6	; 0x06
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <H_LCD_Void_LCDInt+0x12c>
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10000);   /// delay for 1 second to give LCD Microcontroller time to start
	///****************  LCD Commands***********///
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command1);  ///
    2d24:	83 e3       	ldi	r24, 0x33	; 51
    2d26:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command2);  /// set 4_bit_mode
    2d2a:	82 e3       	ldi	r24, 0x32	; 50
    2d2c:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(_4_bit_mode_Command3);  ///
    2d30:	88 e2       	ldi	r24, 0x28	; 40
    2d32:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(DisplayON_CursorOFF);  /// set LCD DisplayON
    2d36:	8c e0       	ldi	r24, 0x0C	; 12
    2d38:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Return_Home);         /// LCD start from home
    2d3c:	82 e0       	ldi	r24, 0x02	; 2
    2d3e:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(Clear_screen);        /// Clear LCD screen
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>

#endif
}
    2d48:	2e 96       	adiw	r28, 0x0e	; 14
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <H_LCD_Void_LCDDisplayCharacter>:
///***********Function to DisplayCharacter on the LCD*****8///
void H_LCD_Void_LCDDisplayCharacter(u8 Local_u8_character)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	e9 97       	sbiw	r28, 0x39	; 57
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	66 e0       	ldi	r22, 0x06	; 6
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_character& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    2d7a:	a8 e3       	ldi	r26, 0x38	; 56
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d80:	98 2f       	mov	r25, r24
    2d82:	90 7f       	andi	r25, 0xF0	; 240
    2d84:	e8 e3       	ldi	r30, 0x38	; 56
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8f 70       	andi	r24, 0x0F	; 15
    2d8c:	89 2b       	or	r24, r25
    2d8e:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	67 e0       	ldi	r22, 0x07	; 7
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e8       	ldi	r26, 0x80	; 128
    2da0:	bf e3       	ldi	r27, 0x3F	; 63
    2da2:	8d ab       	std	Y+53, r24	; 0x35
    2da4:	9e ab       	std	Y+54, r25	; 0x36
    2da6:	af ab       	std	Y+55, r26	; 0x37
    2da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2daa:	6d a9       	ldd	r22, Y+53	; 0x35
    2dac:	7e a9       	ldd	r23, Y+54	; 0x36
    2dae:	8f a9       	ldd	r24, Y+55	; 0x37
    2db0:	98 ad       	ldd	r25, Y+56	; 0x38
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a e7       	ldi	r20, 0x7A	; 122
    2db8:	53 e4       	ldi	r21, 0x43	; 67
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	89 ab       	std	Y+49, r24	; 0x31
    2dc4:	9a ab       	std	Y+50, r25	; 0x32
    2dc6:	ab ab       	std	Y+51, r26	; 0x33
    2dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dca:	69 a9       	ldd	r22, Y+49	; 0x31
    2dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2dce:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	2c f4       	brge	.+10     	; 0x2dec <H_LCD_Void_LCDDisplayCharacter+0x92>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
    2dea:	3f c0       	rjmp	.+126    	; 0x2e6a <H_LCD_Void_LCDDisplayCharacter+0x110>
	else if (__tmp > 65535)
    2dec:	69 a9       	ldd	r22, Y+49	; 0x31
    2dee:	7a a9       	ldd	r23, Y+50	; 0x32
    2df0:	8b a9       	ldd	r24, Y+51	; 0x33
    2df2:	9c a9       	ldd	r25, Y+52	; 0x34
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	4c f5       	brge	.+82     	; 0x2e56 <H_LCD_Void_LCDDisplayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	6d a9       	ldd	r22, Y+53	; 0x35
    2e06:	7e a9       	ldd	r23, Y+54	; 0x36
    2e08:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	98 ab       	std	Y+48, r25	; 0x30
    2e2a:	8f a7       	std	Y+47, r24	; 0x2f
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <H_LCD_Void_LCDDisplayCharacter+0xf2>
    2e2e:	89 e1       	ldi	r24, 0x19	; 25
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9e a7       	std	Y+46, r25	; 0x2e
    2e34:	8d a7       	std	Y+45, r24	; 0x2d
    2e36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <H_LCD_Void_LCDDisplayCharacter+0xe0>
    2e3e:	9e a7       	std	Y+46, r25	; 0x2e
    2e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e44:	98 a9       	ldd	r25, Y+48	; 0x30
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <H_LCD_Void_LCDDisplayCharacter+0xd4>
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <H_LCD_Void_LCDDisplayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	69 a9       	ldd	r22, Y+49	; 0x31
    2e58:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	98 ab       	std	Y+48, r25	; 0x30
    2e68:	8f a7       	std	Y+47, r24	; 0x2f
    2e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e6e:	9c a7       	std	Y+44, r25	; 0x2c
    2e70:	8b a7       	std	Y+43, r24	; 0x2b
    2e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <H_LCD_Void_LCDDisplayCharacter+0x11c>
    2e7a:	9c a7       	std	Y+44, r25	; 0x2c
    2e7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    2e7e:	84 e0       	ldi	r24, 0x04	; 4
    2e80:	67 e0       	ldi	r22, 0x07	; 7
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e8       	ldi	r26, 0x80	; 128
    2e8e:	bf e3       	ldi	r27, 0x3F	; 63
    2e90:	8f a3       	std	Y+39, r24	; 0x27
    2e92:	98 a7       	std	Y+40, r25	; 0x28
    2e94:	a9 a7       	std	Y+41, r26	; 0x29
    2e96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e98:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    2e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	4a e7       	ldi	r20, 0x7A	; 122
    2ea6:	53 e4       	ldi	r21, 0x43	; 67
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8b a3       	std	Y+35, r24	; 0x23
    2eb2:	9c a3       	std	Y+36, r25	; 0x24
    2eb4:	ad a3       	std	Y+37, r26	; 0x25
    2eb6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eba:	7c a1       	ldd	r23, Y+36	; 0x24
    2ebc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ebe:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e8       	ldi	r20, 0x80	; 128
    2ec6:	5f e3       	ldi	r21, 0x3F	; 63
    2ec8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ecc:	88 23       	and	r24, r24
    2ece:	2c f4       	brge	.+10     	; 0x2eda <H_LCD_Void_LCDDisplayCharacter+0x180>
		__ticks = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	9a a3       	std	Y+34, r25	; 0x22
    2ed6:	89 a3       	std	Y+33, r24	; 0x21
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <H_LCD_Void_LCDDisplayCharacter+0x1fe>
	else if (__tmp > 65535)
    2eda:	6b a1       	ldd	r22, Y+35	; 0x23
    2edc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ede:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ee2:	20 e0       	ldi	r18, 0x00	; 0
    2ee4:	3f ef       	ldi	r19, 0xFF	; 255
    2ee6:	4f e7       	ldi	r20, 0x7F	; 127
    2ee8:	57 e4       	ldi	r21, 0x47	; 71
    2eea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eee:	18 16       	cp	r1, r24
    2ef0:	4c f5       	brge	.+82     	; 0x2f44 <H_LCD_Void_LCDDisplayCharacter+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ef8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9a a3       	std	Y+34, r25	; 0x22
    2f18:	89 a3       	std	Y+33, r24	; 0x21
    2f1a:	0f c0       	rjmp	.+30     	; 0x2f3a <H_LCD_Void_LCDDisplayCharacter+0x1e0>
    2f1c:	89 e1       	ldi	r24, 0x19	; 25
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	98 a3       	std	Y+32, r25	; 0x20
    2f22:	8f 8f       	std	Y+31, r24	; 0x1f
    2f24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f26:	98 a1       	ldd	r25, Y+32	; 0x20
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <H_LCD_Void_LCDDisplayCharacter+0x1ce>
    2f2c:	98 a3       	std	Y+32, r25	; 0x20
    2f2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f30:	89 a1       	ldd	r24, Y+33	; 0x21
    2f32:	9a a1       	ldd	r25, Y+34	; 0x22
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	9a a3       	std	Y+34, r25	; 0x22
    2f38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	69 f7       	brne	.-38     	; 0x2f1c <H_LCD_Void_LCDDisplayCharacter+0x1c2>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <H_LCD_Void_LCDDisplayCharacter+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f44:	6b a1       	ldd	r22, Y+35	; 0x23
    2f46:	7c a1       	ldd	r23, Y+36	; 0x24
    2f48:	8d a1       	ldd	r24, Y+37	; 0x25
    2f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	9a a3       	std	Y+34, r25	; 0x22
    2f56:	89 a3       	std	Y+33, r24	; 0x21
    2f58:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f5e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <H_LCD_Void_LCDDisplayCharacter+0x20a>
    2f68:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
	///Set LCD_DATA_PORT equal Local_u8_character Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_character << 4 ) & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    2f6c:	a8 e3       	ldi	r26, 0x38	; 56
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	89 ad       	ldd	r24, Y+57	; 0x39
    2f72:	88 2f       	mov	r24, r24
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	82 95       	swap	r24
    2f78:	92 95       	swap	r25
    2f7a:	90 7f       	andi	r25, 0xF0	; 240
    2f7c:	98 27       	eor	r25, r24
    2f7e:	80 7f       	andi	r24, 0xF0	; 240
    2f80:	98 27       	eor	r25, r24
    2f82:	98 2f       	mov	r25, r24
    2f84:	e8 e3       	ldi	r30, 0x38	; 56
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	8f 70       	andi	r24, 0x0F	; 15
    2f8c:	89 2b       	or	r24, r25
    2f8e:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    2f90:	84 e0       	ldi	r24, 0x04	; 4
    2f92:	67 e0       	ldi	r22, 0x07	; 7
    2f94:	41 e0       	ldi	r20, 0x01	; 1
    2f96:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 e8       	ldi	r26, 0x80	; 128
    2fa0:	bf e3       	ldi	r27, 0x3F	; 63
    2fa2:	89 8f       	std	Y+25, r24	; 0x19
    2fa4:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa6:	ab 8f       	std	Y+27, r26	; 0x1b
    2fa8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	69 8d       	ldd	r22, Y+25	; 0x19
    2fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a e7       	ldi	r20, 0x7A	; 122
    2fb8:	53 e4       	ldi	r21, 0x43	; 67
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	8d 8b       	std	Y+21, r24	; 0x15
    2fc4:	9e 8b       	std	Y+22, r25	; 0x16
    2fc6:	af 8b       	std	Y+23, r26	; 0x17
    2fc8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fca:	6d 89       	ldd	r22, Y+21	; 0x15
    2fcc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fce:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <H_LCD_Void_LCDDisplayCharacter+0x292>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <H_LCD_Void_LCDDisplayCharacter+0x310>
	else if (__tmp > 65535)
    2fec:	6d 89       	ldd	r22, Y+21	; 0x15
    2fee:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <H_LCD_Void_LCDDisplayCharacter+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	69 8d       	ldd	r22, Y+25	; 0x19
    3006:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9c 8b       	std	Y+20, r25	; 0x14
    302a:	8b 8b       	std	Y+19, r24	; 0x13
    302c:	0f c0       	rjmp	.+30     	; 0x304c <H_LCD_Void_LCDDisplayCharacter+0x2f2>
    302e:	89 e1       	ldi	r24, 0x19	; 25
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9a 8b       	std	Y+18, r25	; 0x12
    3034:	89 8b       	std	Y+17, r24	; 0x11
    3036:	89 89       	ldd	r24, Y+17	; 0x11
    3038:	9a 89       	ldd	r25, Y+18	; 0x12
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <H_LCD_Void_LCDDisplayCharacter+0x2e0>
    303e:	9a 8b       	std	Y+18, r25	; 0x12
    3040:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8b 89       	ldd	r24, Y+19	; 0x13
    3044:	9c 89       	ldd	r25, Y+20	; 0x14
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9c 8b       	std	Y+20, r25	; 0x14
    304a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8b 89       	ldd	r24, Y+19	; 0x13
    304e:	9c 89       	ldd	r25, Y+20	; 0x14
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <H_LCD_Void_LCDDisplayCharacter+0x2d4>
    3054:	14 c0       	rjmp	.+40     	; 0x307e <H_LCD_Void_LCDDisplayCharacter+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6d 89       	ldd	r22, Y+21	; 0x15
    3058:	7e 89       	ldd	r23, Y+22	; 0x16
    305a:	8f 89       	ldd	r24, Y+23	; 0x17
    305c:	98 8d       	ldd	r25, Y+24	; 0x18
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9c 8b       	std	Y+20, r25	; 0x14
    3068:	8b 8b       	std	Y+19, r24	; 0x13
    306a:	8b 89       	ldd	r24, Y+19	; 0x13
    306c:	9c 89       	ldd	r25, Y+20	; 0x14
    306e:	98 8b       	std	Y+16, r25	; 0x10
    3070:	8f 87       	std	Y+15, r24	; 0x0f
    3072:	8f 85       	ldd	r24, Y+15	; 0x0f
    3074:	98 89       	ldd	r25, Y+16	; 0x10
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <H_LCD_Void_LCDDisplayCharacter+0x31c>
    307a:	98 8b       	std	Y+16, r25	; 0x10
    307c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    307e:	84 e0       	ldi	r24, 0x04	; 4
    3080:	67 e0       	ldi	r22, 0x07	; 7
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 ea       	ldi	r26, 0xA0	; 160
    308e:	b0 e4       	ldi	r27, 0x40	; 64
    3090:	8b 87       	std	Y+11, r24	; 0x0b
    3092:	9c 87       	std	Y+12, r25	; 0x0c
    3094:	ad 87       	std	Y+13, r26	; 0x0d
    3096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3098:	6b 85       	ldd	r22, Y+11	; 0x0b
    309a:	7c 85       	ldd	r23, Y+12	; 0x0c
    309c:	8d 85       	ldd	r24, Y+13	; 0x0d
    309e:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	4a e7       	ldi	r20, 0x7A	; 122
    30a6:	53 e4       	ldi	r21, 0x43	; 67
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	8f 83       	std	Y+7, r24	; 0x07
    30b2:	98 87       	std	Y+8, r25	; 0x08
    30b4:	a9 87       	std	Y+9, r26	; 0x09
    30b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	2c f4       	brge	.+10     	; 0x30da <H_LCD_Void_LCDDisplayCharacter+0x380>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
    30d8:	3f c0       	rjmp	.+126    	; 0x3158 <H_LCD_Void_LCDDisplayCharacter+0x3fe>
	else if (__tmp > 65535)
    30da:	6f 81       	ldd	r22, Y+7	; 0x07
    30dc:	78 85       	ldd	r23, Y+8	; 0x08
    30de:	89 85       	ldd	r24, Y+9	; 0x09
    30e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	3f ef       	ldi	r19, 0xFF	; 255
    30e6:	4f e7       	ldi	r20, 0x7F	; 127
    30e8:	57 e4       	ldi	r21, 0x47	; 71
    30ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ee:	18 16       	cp	r1, r24
    30f0:	4c f5       	brge	.+82     	; 0x3144 <H_LCD_Void_LCDDisplayCharacter+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 e2       	ldi	r20, 0x20	; 32
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	bc 01       	movw	r22, r24
    310c:	cd 01       	movw	r24, r26
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	0f c0       	rjmp	.+30     	; 0x313a <H_LCD_Void_LCDDisplayCharacter+0x3e0>
    311c:	89 e1       	ldi	r24, 0x19	; 25
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	9c 83       	std	Y+4, r25	; 0x04
    3122:	8b 83       	std	Y+3, r24	; 0x03
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	9c 81       	ldd	r25, Y+4	; 0x04
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <H_LCD_Void_LCDDisplayCharacter+0x3ce>
    312c:	9c 83       	std	Y+4, r25	; 0x04
    312e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3130:	8d 81       	ldd	r24, Y+5	; 0x05
    3132:	9e 81       	ldd	r25, Y+6	; 0x06
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	9e 83       	std	Y+6, r25	; 0x06
    3138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	69 f7       	brne	.-38     	; 0x311c <H_LCD_Void_LCDDisplayCharacter+0x3c2>
    3142:	14 c0       	rjmp	.+40     	; 0x316c <H_LCD_Void_LCDDisplayCharacter+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3144:	6f 81       	ldd	r22, Y+7	; 0x07
    3146:	78 85       	ldd	r23, Y+8	; 0x08
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	9a 85       	ldd	r25, Y+10	; 0x0a
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	8d 81       	ldd	r24, Y+5	; 0x05
    315a:	9e 81       	ldd	r25, Y+6	; 0x06
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	9a 81       	ldd	r25, Y+2	; 0x02
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <H_LCD_Void_LCDDisplayCharacter+0x40a>
    3168:	9a 83       	std	Y+2, r25	; 0x02
    316a:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    316c:	e9 96       	adiw	r28, 0x39	; 57
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <H_LCD_Void_LCDWriteCommand>:
///***********Function to write a command to LCD*****8///
void H_LCD_Void_LCDWriteCommand(u8 Local_u8_Command)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	e9 97       	sbiw	r28, 0x39	; 57
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW

#elif LCD_MODE == Activate_4_bit_mode  ///****4_bit_mode**********///
	///*******Set LCD_RS_PIN value to HIGH *********///
	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    3194:	84 e0       	ldi	r24, 0x04	; 4
    3196:	66 e0       	ldi	r22, 0x06	; 6
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to left by 1 to send left part of the character
	LCD_DATA_PORT = (Local_u8_Command & 0b11110000)|(LCD_DATA_PORT & 0b00001111) ;
    319e:	a8 e3       	ldi	r26, 0x38	; 56
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	89 ad       	ldd	r24, Y+57	; 0x39
    31a4:	98 2f       	mov	r25, r24
    31a6:	90 7f       	andi	r25, 0xF0	; 240
    31a8:	e8 e3       	ldi	r30, 0x38	; 56
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8f 70       	andi	r24, 0x0F	; 15
    31b0:	89 2b       	or	r24, r25
    31b2:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    31b4:	84 e0       	ldi	r24, 0x04	; 4
    31b6:	67 e0       	ldi	r22, 0x07	; 7
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	a0 e8       	ldi	r26, 0x80	; 128
    31c4:	bf e3       	ldi	r27, 0x3F	; 63
    31c6:	8d ab       	std	Y+53, r24	; 0x35
    31c8:	9e ab       	std	Y+54, r25	; 0x36
    31ca:	af ab       	std	Y+55, r26	; 0x37
    31cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ce:	6d a9       	ldd	r22, Y+53	; 0x35
    31d0:	7e a9       	ldd	r23, Y+54	; 0x36
    31d2:	8f a9       	ldd	r24, Y+55	; 0x37
    31d4:	98 ad       	ldd	r25, Y+56	; 0x38
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	4a e7       	ldi	r20, 0x7A	; 122
    31dc:	53 e4       	ldi	r21, 0x43	; 67
    31de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	89 ab       	std	Y+49, r24	; 0x31
    31e8:	9a ab       	std	Y+50, r25	; 0x32
    31ea:	ab ab       	std	Y+51, r26	; 0x33
    31ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31ee:	69 a9       	ldd	r22, Y+49	; 0x31
    31f0:	7a a9       	ldd	r23, Y+50	; 0x32
    31f2:	8b a9       	ldd	r24, Y+51	; 0x33
    31f4:	9c a9       	ldd	r25, Y+52	; 0x34
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	2c f4       	brge	.+10     	; 0x3210 <H_LCD_Void_LCDWriteCommand+0x92>
		__ticks = 1;
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	98 ab       	std	Y+48, r25	; 0x30
    320c:	8f a7       	std	Y+47, r24	; 0x2f
    320e:	3f c0       	rjmp	.+126    	; 0x328e <H_LCD_Void_LCDWriteCommand+0x110>
	else if (__tmp > 65535)
    3210:	69 a9       	ldd	r22, Y+49	; 0x31
    3212:	7a a9       	ldd	r23, Y+50	; 0x32
    3214:	8b a9       	ldd	r24, Y+51	; 0x33
    3216:	9c a9       	ldd	r25, Y+52	; 0x34
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	3f ef       	ldi	r19, 0xFF	; 255
    321c:	4f e7       	ldi	r20, 0x7F	; 127
    321e:	57 e4       	ldi	r21, 0x47	; 71
    3220:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3224:	18 16       	cp	r1, r24
    3226:	4c f5       	brge	.+82     	; 0x327a <H_LCD_Void_LCDWriteCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3228:	6d a9       	ldd	r22, Y+53	; 0x35
    322a:	7e a9       	ldd	r23, Y+54	; 0x36
    322c:	8f a9       	ldd	r24, Y+55	; 0x37
    322e:	98 ad       	ldd	r25, Y+56	; 0x38
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	40 e2       	ldi	r20, 0x20	; 32
    3236:	51 e4       	ldi	r21, 0x41	; 65
    3238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	98 ab       	std	Y+48, r25	; 0x30
    324e:	8f a7       	std	Y+47, r24	; 0x2f
    3250:	0f c0       	rjmp	.+30     	; 0x3270 <H_LCD_Void_LCDWriteCommand+0xf2>
    3252:	89 e1       	ldi	r24, 0x19	; 25
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9e a7       	std	Y+46, r25	; 0x2e
    3258:	8d a7       	std	Y+45, r24	; 0x2d
    325a:	8d a5       	ldd	r24, Y+45	; 0x2d
    325c:	9e a5       	ldd	r25, Y+46	; 0x2e
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	f1 f7       	brne	.-4      	; 0x325e <H_LCD_Void_LCDWriteCommand+0xe0>
    3262:	9e a7       	std	Y+46, r25	; 0x2e
    3264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3266:	8f a5       	ldd	r24, Y+47	; 0x2f
    3268:	98 a9       	ldd	r25, Y+48	; 0x30
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	98 ab       	std	Y+48, r25	; 0x30
    326e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3270:	8f a5       	ldd	r24, Y+47	; 0x2f
    3272:	98 a9       	ldd	r25, Y+48	; 0x30
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	69 f7       	brne	.-38     	; 0x3252 <H_LCD_Void_LCDWriteCommand+0xd4>
    3278:	14 c0       	rjmp	.+40     	; 0x32a2 <H_LCD_Void_LCDWriteCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	69 a9       	ldd	r22, Y+49	; 0x31
    327c:	7a a9       	ldd	r23, Y+50	; 0x32
    327e:	8b a9       	ldd	r24, Y+51	; 0x33
    3280:	9c a9       	ldd	r25, Y+52	; 0x34
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	98 ab       	std	Y+48, r25	; 0x30
    328c:	8f a7       	std	Y+47, r24	; 0x2f
    328e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3290:	98 a9       	ldd	r25, Y+48	; 0x30
    3292:	9c a7       	std	Y+44, r25	; 0x2c
    3294:	8b a7       	std	Y+43, r24	; 0x2b
    3296:	8b a5       	ldd	r24, Y+43	; 0x2b
    3298:	9c a5       	ldd	r25, Y+44	; 0x2c
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	f1 f7       	brne	.-4      	; 0x329a <H_LCD_Void_LCDWriteCommand+0x11c>
    329e:	9c a7       	std	Y+44, r25	; 0x2c
    32a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    32a2:	84 e0       	ldi	r24, 0x04	; 4
    32a4:	67 e0       	ldi	r22, 0x07	; 7
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	a0 e8       	ldi	r26, 0x80	; 128
    32b2:	bf e3       	ldi	r27, 0x3F	; 63
    32b4:	8f a3       	std	Y+39, r24	; 0x27
    32b6:	98 a7       	std	Y+40, r25	; 0x28
    32b8:	a9 a7       	std	Y+41, r26	; 0x29
    32ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32bc:	6f a1       	ldd	r22, Y+39	; 0x27
    32be:	78 a5       	ldd	r23, Y+40	; 0x28
    32c0:	89 a5       	ldd	r24, Y+41	; 0x29
    32c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	4a e7       	ldi	r20, 0x7A	; 122
    32ca:	53 e4       	ldi	r21, 0x43	; 67
    32cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	8b a3       	std	Y+35, r24	; 0x23
    32d6:	9c a3       	std	Y+36, r25	; 0x24
    32d8:	ad a3       	std	Y+37, r26	; 0x25
    32da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32dc:	6b a1       	ldd	r22, Y+35	; 0x23
    32de:	7c a1       	ldd	r23, Y+36	; 0x24
    32e0:	8d a1       	ldd	r24, Y+37	; 0x25
    32e2:	9e a1       	ldd	r25, Y+38	; 0x26
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e8       	ldi	r20, 0x80	; 128
    32ea:	5f e3       	ldi	r21, 0x3F	; 63
    32ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f0:	88 23       	and	r24, r24
    32f2:	2c f4       	brge	.+10     	; 0x32fe <H_LCD_Void_LCDWriteCommand+0x180>
		__ticks = 1;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	9a a3       	std	Y+34, r25	; 0x22
    32fa:	89 a3       	std	Y+33, r24	; 0x21
    32fc:	3f c0       	rjmp	.+126    	; 0x337c <H_LCD_Void_LCDWriteCommand+0x1fe>
	else if (__tmp > 65535)
    32fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3300:	7c a1       	ldd	r23, Y+36	; 0x24
    3302:	8d a1       	ldd	r24, Y+37	; 0x25
    3304:	9e a1       	ldd	r25, Y+38	; 0x26
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	3f ef       	ldi	r19, 0xFF	; 255
    330a:	4f e7       	ldi	r20, 0x7F	; 127
    330c:	57 e4       	ldi	r21, 0x47	; 71
    330e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3312:	18 16       	cp	r1, r24
    3314:	4c f5       	brge	.+82     	; 0x3368 <H_LCD_Void_LCDWriteCommand+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3316:	6f a1       	ldd	r22, Y+39	; 0x27
    3318:	78 a5       	ldd	r23, Y+40	; 0x28
    331a:	89 a5       	ldd	r24, Y+41	; 0x29
    331c:	9a a5       	ldd	r25, Y+42	; 0x2a
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e2       	ldi	r20, 0x20	; 32
    3324:	51 e4       	ldi	r21, 0x41	; 65
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	9a a3       	std	Y+34, r25	; 0x22
    333c:	89 a3       	std	Y+33, r24	; 0x21
    333e:	0f c0       	rjmp	.+30     	; 0x335e <H_LCD_Void_LCDWriteCommand+0x1e0>
    3340:	89 e1       	ldi	r24, 0x19	; 25
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	98 a3       	std	Y+32, r25	; 0x20
    3346:	8f 8f       	std	Y+31, r24	; 0x1f
    3348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    334a:	98 a1       	ldd	r25, Y+32	; 0x20
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	f1 f7       	brne	.-4      	; 0x334c <H_LCD_Void_LCDWriteCommand+0x1ce>
    3350:	98 a3       	std	Y+32, r25	; 0x20
    3352:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3354:	89 a1       	ldd	r24, Y+33	; 0x21
    3356:	9a a1       	ldd	r25, Y+34	; 0x22
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	9a a3       	std	Y+34, r25	; 0x22
    335c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335e:	89 a1       	ldd	r24, Y+33	; 0x21
    3360:	9a a1       	ldd	r25, Y+34	; 0x22
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	69 f7       	brne	.-38     	; 0x3340 <H_LCD_Void_LCDWriteCommand+0x1c2>
    3366:	14 c0       	rjmp	.+40     	; 0x3390 <H_LCD_Void_LCDWriteCommand+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3368:	6b a1       	ldd	r22, Y+35	; 0x23
    336a:	7c a1       	ldd	r23, Y+36	; 0x24
    336c:	8d a1       	ldd	r24, Y+37	; 0x25
    336e:	9e a1       	ldd	r25, Y+38	; 0x26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	9a a3       	std	Y+34, r25	; 0x22
    337a:	89 a3       	std	Y+33, r24	; 0x21
    337c:	89 a1       	ldd	r24, Y+33	; 0x21
    337e:	9a a1       	ldd	r25, Y+34	; 0x22
    3380:	9e 8f       	std	Y+30, r25	; 0x1e
    3382:	8d 8f       	std	Y+29, r24	; 0x1d
    3384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <H_LCD_Void_LCDWriteCommand+0x20a>
    338c:	9e 8f       	std	Y+30, r25	; 0x1e
    338e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); ////delay for 1 millisecond to let LCD read the first part

//	///*******Set LCD_RS_PIN value to HIGH *********///
//	M_DIO_void_SetPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
	///Set LCD_DATA_PORT equal Local_u8_Command Shifted to Right  by 3 to send Right part of the character
	LCD_DATA_PORT = ((Local_u8_Command << 4)& 0b11110000)|(LCD_DATA_PORT & 0b00001111)  ;
    3390:	a8 e3       	ldi	r26, 0x38	; 56
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	89 ad       	ldd	r24, Y+57	; 0x39
    3396:	88 2f       	mov	r24, r24
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	82 95       	swap	r24
    339c:	92 95       	swap	r25
    339e:	90 7f       	andi	r25, 0xF0	; 240
    33a0:	98 27       	eor	r25, r24
    33a2:	80 7f       	andi	r24, 0xF0	; 240
    33a4:	98 27       	eor	r25, r24
    33a6:	98 2f       	mov	r25, r24
    33a8:	e8 e3       	ldi	r30, 0x38	; 56
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	8f 70       	andi	r24, 0x0F	; 15
    33b0:	89 2b       	or	r24, r25
    33b2:	8c 93       	st	X, r24
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);  /// Set LCD_EN_PIN value to HIGH
    33b4:	84 e0       	ldi	r24, 0x04	; 4
    33b6:	67 e0       	ldi	r22, 0x07	; 7
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	a0 e8       	ldi	r26, 0x80	; 128
    33c4:	bf e3       	ldi	r27, 0x3F	; 63
    33c6:	89 8f       	std	Y+25, r24	; 0x19
    33c8:	9a 8f       	std	Y+26, r25	; 0x1a
    33ca:	ab 8f       	std	Y+27, r26	; 0x1b
    33cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ce:	69 8d       	ldd	r22, Y+25	; 0x19
    33d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	4a e7       	ldi	r20, 0x7A	; 122
    33dc:	53 e4       	ldi	r21, 0x43	; 67
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	8d 8b       	std	Y+21, r24	; 0x15
    33e8:	9e 8b       	std	Y+22, r25	; 0x16
    33ea:	af 8b       	std	Y+23, r26	; 0x17
    33ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33ee:	6d 89       	ldd	r22, Y+21	; 0x15
    33f0:	7e 89       	ldd	r23, Y+22	; 0x16
    33f2:	8f 89       	ldd	r24, Y+23	; 0x17
    33f4:	98 8d       	ldd	r25, Y+24	; 0x18
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e8       	ldi	r20, 0x80	; 128
    33fc:	5f e3       	ldi	r21, 0x3F	; 63
    33fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3402:	88 23       	and	r24, r24
    3404:	2c f4       	brge	.+10     	; 0x3410 <H_LCD_Void_LCDWriteCommand+0x292>
		__ticks = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	9c 8b       	std	Y+20, r25	; 0x14
    340c:	8b 8b       	std	Y+19, r24	; 0x13
    340e:	3f c0       	rjmp	.+126    	; 0x348e <H_LCD_Void_LCDWriteCommand+0x310>
	else if (__tmp > 65535)
    3410:	6d 89       	ldd	r22, Y+21	; 0x15
    3412:	7e 89       	ldd	r23, Y+22	; 0x16
    3414:	8f 89       	ldd	r24, Y+23	; 0x17
    3416:	98 8d       	ldd	r25, Y+24	; 0x18
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	3f ef       	ldi	r19, 0xFF	; 255
    341c:	4f e7       	ldi	r20, 0x7F	; 127
    341e:	57 e4       	ldi	r21, 0x47	; 71
    3420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3424:	18 16       	cp	r1, r24
    3426:	4c f5       	brge	.+82     	; 0x347a <H_LCD_Void_LCDWriteCommand+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3428:	69 8d       	ldd	r22, Y+25	; 0x19
    342a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    342e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	40 e2       	ldi	r20, 0x20	; 32
    3436:	51 e4       	ldi	r21, 0x41	; 65
    3438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	bc 01       	movw	r22, r24
    3442:	cd 01       	movw	r24, r26
    3444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	9c 8b       	std	Y+20, r25	; 0x14
    344e:	8b 8b       	std	Y+19, r24	; 0x13
    3450:	0f c0       	rjmp	.+30     	; 0x3470 <H_LCD_Void_LCDWriteCommand+0x2f2>
    3452:	89 e1       	ldi	r24, 0x19	; 25
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9a 8b       	std	Y+18, r25	; 0x12
    3458:	89 8b       	std	Y+17, r24	; 0x11
    345a:	89 89       	ldd	r24, Y+17	; 0x11
    345c:	9a 89       	ldd	r25, Y+18	; 0x12
    345e:	01 97       	sbiw	r24, 0x01	; 1
    3460:	f1 f7       	brne	.-4      	; 0x345e <H_LCD_Void_LCDWriteCommand+0x2e0>
    3462:	9a 8b       	std	Y+18, r25	; 0x12
    3464:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3466:	8b 89       	ldd	r24, Y+19	; 0x13
    3468:	9c 89       	ldd	r25, Y+20	; 0x14
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	9c 8b       	std	Y+20, r25	; 0x14
    346e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3470:	8b 89       	ldd	r24, Y+19	; 0x13
    3472:	9c 89       	ldd	r25, Y+20	; 0x14
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	69 f7       	brne	.-38     	; 0x3452 <H_LCD_Void_LCDWriteCommand+0x2d4>
    3478:	14 c0       	rjmp	.+40     	; 0x34a2 <H_LCD_Void_LCDWriteCommand+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347a:	6d 89       	ldd	r22, Y+21	; 0x15
    347c:	7e 89       	ldd	r23, Y+22	; 0x16
    347e:	8f 89       	ldd	r24, Y+23	; 0x17
    3480:	98 8d       	ldd	r25, Y+24	; 0x18
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9c 8b       	std	Y+20, r25	; 0x14
    348c:	8b 8b       	std	Y+19, r24	; 0x13
    348e:	8b 89       	ldd	r24, Y+19	; 0x13
    3490:	9c 89       	ldd	r25, Y+20	; 0x14
    3492:	98 8b       	std	Y+16, r25	; 0x10
    3494:	8f 87       	std	Y+15, r24	; 0x0f
    3496:	8f 85       	ldd	r24, Y+15	; 0x0f
    3498:	98 89       	ldd	r25, Y+16	; 0x10
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <H_LCD_Void_LCDWriteCommand+0x31c>
    349e:	98 8b       	std	Y+16, r25	; 0x10
    34a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);     /// delay for 1 millisecond
	M_DIO_void_SetPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);  /// Set LCD_EN_PIN value to LOW
    34a2:	84 e0       	ldi	r24, 0x04	; 4
    34a4:	67 e0       	ldi	r22, 0x07	; 7
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a0 ea       	ldi	r26, 0xA0	; 160
    34b2:	b0 e4       	ldi	r27, 0x40	; 64
    34b4:	8b 87       	std	Y+11, r24	; 0x0b
    34b6:	9c 87       	std	Y+12, r25	; 0x0c
    34b8:	ad 87       	std	Y+13, r26	; 0x0d
    34ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    34be:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	4a e7       	ldi	r20, 0x7A	; 122
    34ca:	53 e4       	ldi	r21, 0x43	; 67
    34cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	8f 83       	std	Y+7, r24	; 0x07
    34d6:	98 87       	std	Y+8, r25	; 0x08
    34d8:	a9 87       	std	Y+9, r26	; 0x09
    34da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34dc:	6f 81       	ldd	r22, Y+7	; 0x07
    34de:	78 85       	ldd	r23, Y+8	; 0x08
    34e0:	89 85       	ldd	r24, Y+9	; 0x09
    34e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e8       	ldi	r20, 0x80	; 128
    34ea:	5f e3       	ldi	r21, 0x3F	; 63
    34ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f0:	88 23       	and	r24, r24
    34f2:	2c f4       	brge	.+10     	; 0x34fe <H_LCD_Void_LCDWriteCommand+0x380>
		__ticks = 1;
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	9e 83       	std	Y+6, r25	; 0x06
    34fa:	8d 83       	std	Y+5, r24	; 0x05
    34fc:	3f c0       	rjmp	.+126    	; 0x357c <H_LCD_Void_LCDWriteCommand+0x3fe>
	else if (__tmp > 65535)
    34fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3500:	78 85       	ldd	r23, Y+8	; 0x08
    3502:	89 85       	ldd	r24, Y+9	; 0x09
    3504:	9a 85       	ldd	r25, Y+10	; 0x0a
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	3f ef       	ldi	r19, 0xFF	; 255
    350a:	4f e7       	ldi	r20, 0x7F	; 127
    350c:	57 e4       	ldi	r21, 0x47	; 71
    350e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3512:	18 16       	cp	r1, r24
    3514:	4c f5       	brge	.+82     	; 0x3568 <H_LCD_Void_LCDWriteCommand+0x3ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3516:	6b 85       	ldd	r22, Y+11	; 0x0b
    3518:	7c 85       	ldd	r23, Y+12	; 0x0c
    351a:	8d 85       	ldd	r24, Y+13	; 0x0d
    351c:	9e 85       	ldd	r25, Y+14	; 0x0e
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	40 e2       	ldi	r20, 0x20	; 32
    3524:	51 e4       	ldi	r21, 0x41	; 65
    3526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	9e 83       	std	Y+6, r25	; 0x06
    353c:	8d 83       	std	Y+5, r24	; 0x05
    353e:	0f c0       	rjmp	.+30     	; 0x355e <H_LCD_Void_LCDWriteCommand+0x3e0>
    3540:	89 e1       	ldi	r24, 0x19	; 25
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	9c 83       	std	Y+4, r25	; 0x04
    3546:	8b 83       	std	Y+3, r24	; 0x03
    3548:	8b 81       	ldd	r24, Y+3	; 0x03
    354a:	9c 81       	ldd	r25, Y+4	; 0x04
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <H_LCD_Void_LCDWriteCommand+0x3ce>
    3550:	9c 83       	std	Y+4, r25	; 0x04
    3552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3554:	8d 81       	ldd	r24, Y+5	; 0x05
    3556:	9e 81       	ldd	r25, Y+6	; 0x06
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	9e 83       	std	Y+6, r25	; 0x06
    355c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355e:	8d 81       	ldd	r24, Y+5	; 0x05
    3560:	9e 81       	ldd	r25, Y+6	; 0x06
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	69 f7       	brne	.-38     	; 0x3540 <H_LCD_Void_LCDWriteCommand+0x3c2>
    3566:	14 c0       	rjmp	.+40     	; 0x3590 <H_LCD_Void_LCDWriteCommand+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3574:	dc 01       	movw	r26, r24
    3576:	cb 01       	movw	r24, r22
    3578:	9e 83       	std	Y+6, r25	; 0x06
    357a:	8d 83       	std	Y+5, r24	; 0x05
    357c:	8d 81       	ldd	r24, Y+5	; 0x05
    357e:	9e 81       	ldd	r25, Y+6	; 0x06
    3580:	9a 83       	std	Y+2, r25	; 0x02
    3582:	89 83       	std	Y+1, r24	; 0x01
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <H_LCD_Void_LCDWriteCommand+0x40a>
    358c:	9a 83       	std	Y+2, r25	; 0x02
    358e:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5); /// to give time to LCD Microcontroller to process the repeated request
}
    3590:	e9 96       	adiw	r28, 0x39	; 57
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	08 95       	ret

000035a2 <H_Lcd_void_LCDWriteString>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
    35a2:	df 93       	push	r29
    35a4:	cf 93       	push	r28
    35a6:	00 d0       	rcall	.+0      	; 0x35a8 <H_Lcd_void_LCDWriteString+0x6>
    35a8:	0f 92       	push	r0
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	9b 83       	std	Y+3, r25	; 0x03
    35b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
    35b2:	19 82       	std	Y+1, r1	; 0x01
    35b4:	0e c0       	rjmp	.+28     	; 0x35d2 <H_Lcd_void_LCDWriteString+0x30>
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
	{
//// call  H_LCD_Void_LCDDisplayCharacter and give it the location of the character on the string
		H_LCD_Void_LCDDisplayCharacter(Local_u8_PTR[Local_u8_Counter]);
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	fc 01       	movw	r30, r24
    35c2:	e2 0f       	add	r30, r18
    35c4:	f3 1f       	adc	r31, r19
    35c6:	80 81       	ld	r24, Z
    35c8:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	89 83       	std	Y+1, r24	; 0x01
}
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteString(u8* Local_u8_PTR)
{
	u8 Local_u8_Counter = 0; /// loacal counter to count string character
	while (Local_u8_PTR[Local_u8_Counter] != NUL) /// while to loop until the end of the string
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	fc 01       	movw	r30, r24
    35de:	e2 0f       	add	r30, r18
    35e0:	f3 1f       	adc	r31, r19
    35e2:	80 81       	ld	r24, Z
    35e4:	88 23       	and	r24, r24
    35e6:	39 f7       	brne	.-50     	; 0x35b6 <H_Lcd_void_LCDWriteString+0x14>
		/// increment the Local_u8_Counter
		Local_u8_Counter++;
	}


}
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <H_Lcd_void_LCDWriteNum>:
/// ********function To Display a String on LCD   *****///
void H_Lcd_void_LCDWriteNum(s32 Local_s2_Number )
{
    35f4:	0f 93       	push	r16
    35f6:	1f 93       	push	r17
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	61 97       	sbiw	r28, 0x11	; 17
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	6e 87       	std	Y+14, r22	; 0x0e
    360e:	7f 87       	std	Y+15, r23	; 0x0f
    3610:	88 8b       	std	Y+16, r24	; 0x10
    3612:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_arr[12]={0};   /// loacal array to store the number of column of the lcd
    3614:	8c e0       	ldi	r24, 0x0C	; 12
    3616:	fe 01       	movw	r30, r28
    3618:	32 96       	adiw	r30, 0x02	; 2
    361a:	df 01       	movw	r26, r30
    361c:	98 2f       	mov	r25, r24
    361e:	1d 92       	st	X+, r1
    3620:	9a 95       	dec	r25
    3622:	e9 f7       	brne	.-6      	; 0x361e <H_Lcd_void_LCDWriteNum+0x2a>
    s8 Local_s8_Counter =0;    /// local counter for for loop
    3624:	19 82       	std	Y+1, r1	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    3626:	8e 85       	ldd	r24, Y+14	; 0x0e
    3628:	9f 85       	ldd	r25, Y+15	; 0x0f
    362a:	a8 89       	ldd	r26, Y+16	; 0x10
    362c:	b9 89       	ldd	r27, Y+17	; 0x11
    362e:	bb 23       	and	r27, r27
    3630:	0c f0       	brlt	.+2      	; 0x3634 <H_Lcd_void_LCDWriteNum+0x40>
    3632:	42 c0       	rjmp	.+132    	; 0x36b8 <H_Lcd_void_LCDWriteNum+0xc4>
    {
     H_LCD_Void_LCDDisplayCharacter('-');
    3634:	8d e2       	ldi	r24, 0x2D	; 45
    3636:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
     Local_s2_Number = Local_s2_Number * -1 ;
    363a:	8e 85       	ldd	r24, Y+14	; 0x0e
    363c:	9f 85       	ldd	r25, Y+15	; 0x0f
    363e:	a8 89       	ldd	r26, Y+16	; 0x10
    3640:	b9 89       	ldd	r27, Y+17	; 0x11
    3642:	b0 95       	com	r27
    3644:	a0 95       	com	r26
    3646:	90 95       	com	r25
    3648:	81 95       	neg	r24
    364a:	9f 4f       	sbci	r25, 0xFF	; 255
    364c:	af 4f       	sbci	r26, 0xFF	; 255
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	8e 87       	std	Y+14, r24	; 0x0e
    3652:	9f 87       	std	Y+15, r25	; 0x0f
    3654:	a8 8b       	std	Y+16, r26	; 0x10
    3656:	b9 8b       	std	Y+17, r27	; 0x11
    3658:	2f c0       	rjmp	.+94     	; 0x36b8 <H_Lcd_void_LCDWriteNum+0xc4>
    }
    while(Local_s2_Number !=0)
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	08 2f       	mov	r16, r24
    365e:	11 27       	eor	r17, r17
    3660:	07 fd       	sbrc	r16, 7
    3662:	10 95       	com	r17
    3664:	8e 85       	ldd	r24, Y+14	; 0x0e
    3666:	9f 85       	ldd	r25, Y+15	; 0x0f
    3668:	a8 89       	ldd	r26, Y+16	; 0x10
    366a:	b9 89       	ldd	r27, Y+17	; 0x11
    366c:	2a e0       	ldi	r18, 0x0A	; 10
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	50 e0       	ldi	r21, 0x00	; 0
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__divmodsi4>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	28 2f       	mov	r18, r24
    3682:	ce 01       	movw	r24, r28
    3684:	02 96       	adiw	r24, 0x02	; 2
    3686:	fc 01       	movw	r30, r24
    3688:	e0 0f       	add	r30, r16
    368a:	f1 1f       	adc	r31, r17
    368c:	20 83       	st	Z, r18
    	Local_s2_Number /=10;
    368e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3690:	9f 85       	ldd	r25, Y+15	; 0x0f
    3692:	a8 89       	ldd	r26, Y+16	; 0x10
    3694:	b9 89       	ldd	r27, Y+17	; 0x11
    3696:	2a e0       	ldi	r18, 0x0A	; 10
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	50 e0       	ldi	r21, 0x00	; 0
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__divmodsi4>
    36a6:	da 01       	movw	r26, r20
    36a8:	c9 01       	movw	r24, r18
    36aa:	8e 87       	std	Y+14, r24	; 0x0e
    36ac:	9f 87       	std	Y+15, r25	; 0x0f
    36ae:	a8 8b       	std	Y+16, r26	; 0x10
    36b0:	b9 8b       	std	Y+17, r27	; 0x11
    	Local_s8_Counter ++;
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	8f 5f       	subi	r24, 0xFF	; 255
    36b6:	89 83       	std	Y+1, r24	; 0x01
    if (Local_s2_Number < 0 )   /// check if the number is less than 0 to add sighn (-)
    {
     H_LCD_Void_LCDDisplayCharacter('-');
     Local_s2_Number = Local_s2_Number * -1 ;
    }
    while(Local_s2_Number !=0)
    36b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    36ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    36bc:	a8 89       	ldd	r26, Y+16	; 0x10
    36be:	b9 89       	ldd	r27, Y+17	; 0x11
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	a1 05       	cpc	r26, r1
    36c4:	b1 05       	cpc	r27, r1
    36c6:	49 f6       	brne	.-110    	; 0x365a <H_Lcd_void_LCDWriteNum+0x66>
    {
    	Local_u8_arr [Local_s8_Counter] = Local_s2_Number %10;;
    	Local_s2_Number /=10;
    	Local_s8_Counter ++;
    }
    Local_s8_Counter--;
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	81 50       	subi	r24, 0x01	; 1
    36cc:	89 83       	std	Y+1, r24	; 0x01
   do
    {
    	H_LCD_Void_LCDDisplayCharacter(Local_u8_arr [Local_s8_Counter] + 48);
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	28 2f       	mov	r18, r24
    36d2:	33 27       	eor	r19, r19
    36d4:	27 fd       	sbrc	r18, 7
    36d6:	30 95       	com	r19
    36d8:	ce 01       	movw	r24, r28
    36da:	02 96       	adiw	r24, 0x02	; 2
    36dc:	fc 01       	movw	r30, r24
    36de:	e2 0f       	add	r30, r18
    36e0:	f3 1f       	adc	r31, r19
    36e2:	80 81       	ld	r24, Z
    36e4:	80 5d       	subi	r24, 0xD0	; 208
    36e6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
    	Local_s8_Counter--;
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	81 50       	subi	r24, 0x01	; 1
    36ee:	89 83       	std	Y+1, r24	; 0x01
    } while(Local_s8_Counter >= 0);
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	88 23       	and	r24, r24
    36f4:	64 f7       	brge	.-40     	; 0x36ce <H_Lcd_void_LCDWriteNum+0xda>

}
    36f6:	61 96       	adiw	r28, 0x11	; 17
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	08 95       	ret

0000370c <H_Lcd_void_LCDGoToXY>:
/// ********function To Select Row and Column	 on LCD   *****///
void H_Lcd_void_LCDGoToXY(u8 Local_u8_Row,u8 Local_u8_Column)
{
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <H_Lcd_void_LCDGoToXY+0x6>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <H_Lcd_void_LCDGoToXY+0x8>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	8b 83       	std	Y+3, r24	; 0x03
    371a:	6c 83       	std	Y+4, r22	; 0x04
 if(Local_u8_Row >= 0 && Local_u8_Row <= 1 && Local_u8_Column >= 0 && Local_u8_Column <= 15)
    371c:	8b 81       	ldd	r24, Y+3	; 0x03
    371e:	82 30       	cpi	r24, 0x02	; 2
    3720:	a8 f4       	brcc	.+42     	; 0x374c <H_Lcd_void_LCDGoToXY+0x40>
    3722:	8c 81       	ldd	r24, Y+4	; 0x04
    3724:	80 31       	cpi	r24, 0x10	; 16
    3726:	90 f4       	brcc	.+36     	; 0x374c <H_Lcd_void_LCDGoToXY+0x40>
		{

			u8 Arr[2]={SET_ROW0_COL0, SET_ROW1_COL0};
    3728:	80 e8       	ldi	r24, 0x80	; 128
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	80 ec       	ldi	r24, 0xC0	; 192
    372e:	8a 83       	std	Y+2, r24	; 0x02
			H_LCD_Void_LCDWriteCommand(Arr[Local_u8_Row]+ Local_u8_Column);
    3730:	8b 81       	ldd	r24, Y+3	; 0x03
    3732:	28 2f       	mov	r18, r24
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	ce 01       	movw	r24, r28
    3738:	01 96       	adiw	r24, 0x01	; 1
    373a:	fc 01       	movw	r30, r24
    373c:	e2 0f       	add	r30, r18
    373e:	f3 1f       	adc	r31, r19
    3740:	90 81       	ld	r25, Z
    3742:	8c 81       	ldd	r24, Y+4	; 0x04
    3744:	89 0f       	add	r24, r25
    3746:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
    374a:	04 c0       	rjmp	.+8      	; 0x3754 <H_Lcd_void_LCDGoToXY+0x48>
		}
 else
 {
	 H_Lcd_void_LCDWriteString("wrong input!!");
    374c:	80 e6       	ldi	r24, 0x60	; 96
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <H_Lcd_void_LCDWriteString>
 }

}
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <H_Lcd_void_LCDClockDisplay>:
/// ********function To Display a clock format on LCD  *****///
void H_Lcd_void_LCDClockDisplay(u8 Local_u8_Hours,u8 Local_u8_Minutes,u8 Local_u8_Seconds)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	29 97       	sbiw	r28, 0x09	; 9
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	89 83       	std	Y+1, r24	; 0x01
    3778:	6a 83       	std	Y+2, r22	; 0x02
    377a:	4b 83       	std	Y+3, r20	; 0x03
	H_Lcd_void_LCDWriteString("Clock");
    377c:	8e e6       	ldi	r24, 0x6E	; 110
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <H_Lcd_void_LCDWriteString>
	if((Local_u8_Hours > 9) | (Local_u8_Minutes >9) | (Local_u8_Seconds > 9))
    3784:	19 86       	std	Y+9, r1	; 0x09
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	8a 30       	cpi	r24, 0x0A	; 10
    378a:	10 f0       	brcs	.+4      	; 0x3790 <H_Lcd_void_LCDClockDisplay+0x2e>
    378c:	21 e0       	ldi	r18, 0x01	; 1
    378e:	29 87       	std	Y+9, r18	; 0x09
    3790:	18 86       	std	Y+8, r1	; 0x08
    3792:	8a 81       	ldd	r24, Y+2	; 0x02
    3794:	8a 30       	cpi	r24, 0x0A	; 10
    3796:	10 f0       	brcs	.+4      	; 0x379c <H_Lcd_void_LCDClockDisplay+0x3a>
    3798:	31 e0       	ldi	r19, 0x01	; 1
    379a:	38 87       	std	Y+8, r19	; 0x08
    379c:	89 85       	ldd	r24, Y+9	; 0x09
    379e:	98 85       	ldd	r25, Y+8	; 0x08
    37a0:	89 2b       	or	r24, r25
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	3f 83       	std	Y+7, r19	; 0x07
    37a8:	2e 83       	std	Y+6, r18	; 0x06
    37aa:	1d 82       	std	Y+5, r1	; 0x05
    37ac:	1c 82       	std	Y+4, r1	; 0x04
    37ae:	8b 81       	ldd	r24, Y+3	; 0x03
    37b0:	8a 30       	cpi	r24, 0x0A	; 10
    37b2:	20 f0       	brcs	.+8      	; 0x37bc <H_Lcd_void_LCDClockDisplay+0x5a>
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9d 83       	std	Y+5, r25	; 0x05
    37ba:	8c 83       	std	Y+4, r24	; 0x04
    37bc:	8e 81       	ldd	r24, Y+6	; 0x06
    37be:	9f 81       	ldd	r25, Y+7	; 0x07
    37c0:	2c 81       	ldd	r18, Y+4	; 0x04
    37c2:	3d 81       	ldd	r19, Y+5	; 0x05
    37c4:	82 2b       	or	r24, r18
    37c6:	93 2b       	or	r25, r19
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	d1 f1       	breq	.+116    	; 0x3840 <H_Lcd_void_LCDClockDisplay+0xde>
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	67 e0       	ldi	r22, 0x07	; 7
    37d0:	0e 94 86 1b 	call	0x370c	; 0x370c <H_Lcd_void_LCDGoToXY>
	    H_Lcd_void_LCDWriteString("H :M :S");
    37d4:	84 e7       	ldi	r24, 0x74	; 116
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	67 e0       	ldi	r22, 0x07	; 7
    37e0:	0e 94 86 1b 	call	0x370c	; 0x370c <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	88 2f       	mov	r24, r24
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	bc 01       	movw	r22, r24
    37f0:	cd 01       	movw	r24, r26
    37f2:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Hours <= 9)
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	8a 30       	cpi	r24, 0x0A	; 10
    37fa:	18 f4       	brcc	.+6      	; 0x3802 <H_Lcd_void_LCDClockDisplay+0xa0>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    37fc:	80 e2       	ldi	r24, 0x20	; 32
    37fe:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3802:	8a e3       	ldi	r24, 0x3A	; 58
    3804:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3808:	8a 81       	ldd	r24, Y+2	; 0x02
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 e0       	ldi	r26, 0x00	; 0
    3810:	b0 e0       	ldi	r27, 0x00	; 0
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
		if(Local_u8_Minutes <= 9)
    381a:	8a 81       	ldd	r24, Y+2	; 0x02
    381c:	8a 30       	cpi	r24, 0x0A	; 10
    381e:	18 f4       	brcc	.+6      	; 0x3826 <H_Lcd_void_LCDClockDisplay+0xc4>
			{
				H_LCD_Void_LCDDisplayCharacter(' ');
    3820:	80 e2       	ldi	r24, 0x20	; 32
    3822:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
			}
		H_LCD_Void_LCDDisplayCharacter(':');
    3826:	8a e3       	ldi	r24, 0x3A	; 58
    3828:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	88 2f       	mov	r24, r24
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	a0 e0       	ldi	r26, 0x00	; 0
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	bc 01       	movw	r22, r24
    3838:	cd 01       	movw	r24, r26
    383a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
    383e:	2d c0       	rjmp	.+90     	; 0x389a <H_Lcd_void_LCDClockDisplay+0x138>

	}
	else
	{
		H_Lcd_void_LCDGoToXY(0, 7);
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	67 e0       	ldi	r22, 0x07	; 7
    3844:	0e 94 86 1b 	call	0x370c	; 0x370c <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteString("H:M:S");
    3848:	8c e7       	ldi	r24, 0x7C	; 124
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <H_Lcd_void_LCDWriteString>
		H_Lcd_void_LCDGoToXY(1, 7);
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	67 e0       	ldi	r22, 0x07	; 7
    3854:	0e 94 86 1b 	call	0x370c	; 0x370c <H_Lcd_void_LCDGoToXY>
		H_Lcd_void_LCDWriteNum(Local_u8_Hours);
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	88 2f       	mov	r24, r24
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    386a:	8a e3       	ldi	r24, 0x3A	; 58
    386c:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Minutes);
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	88 2f       	mov	r24, r24
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	a0 e0       	ldi	r26, 0x00	; 0
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
		H_LCD_Void_LCDDisplayCharacter(':');
    3882:	8a e3       	ldi	r24, 0x3A	; 58
    3884:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <H_LCD_Void_LCDDisplayCharacter>
		H_Lcd_void_LCDWriteNum(Local_u8_Seconds);
    3888:	8b 81       	ldd	r24, Y+3	; 0x03
    388a:	88 2f       	mov	r24, r24
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	a0 e0       	ldi	r26, 0x00	; 0
    3890:	b0 e0       	ldi	r27, 0x00	; 0
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <H_Lcd_void_LCDWriteNum>
	}


}
    389a:	29 96       	adiw	r28, 0x09	; 9
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	08 95       	ret

000038ac <H_Lcd_void_LCDClear>:
/// ********function To screen LCD screen *****///
void H_Lcd_void_LCDClear(void)
{
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(Clear_screen);
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	0e 94 bf 18 	call	0x317e	; 0x317e <H_LCD_Void_LCDWriteCommand>
}
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	08 95       	ret

000038c0 <H_KEYPAD_void_KeyPadInt>:
#include "KeyPad_Int.h"

///*****************Functions**********//

void H_KEYPAD_void_KeyPadInt(void)
{
    38c0:	df 93       	push	r29
    38c2:	cf 93       	push	r28
    38c4:	cd b7       	in	r28, 0x3d	; 61
    38c6:	de b7       	in	r29, 0x3e	; 62

	///***************** _ Set Row Pins Direction as input**********//
	M_DIO_void_SetPinDirection(ROWS_PORT, Row1_PIN, OUTPUT);  ///Set_Row_1_Pin_Direction
    38c8:	82 e0       	ldi	r24, 0x02	; 2
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	41 e0       	ldi	r20, 0x01	; 1
    38ce:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row2_PIN, OUTPUT);  ///Set_Row_2_Pin_Direction
    38d2:	82 e0       	ldi	r24, 0x02	; 2
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	41 e0       	ldi	r20, 0x01	; 1
    38d8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row3_PIN, OUTPUT);  ///Set_Row_3_Pin_Direction
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	62 e0       	ldi	r22, 0x02	; 2
    38e0:	41 e0       	ldi	r20, 0x01	; 1
    38e2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(ROWS_PORT, Row4_PIN, OUTPUT);  ///Set_Row_4_Pin_Direction
    38e6:	82 e0       	ldi	r24, 0x02	; 2
    38e8:	63 e0       	ldi	r22, 0x03	; 3
    38ea:	41 e0       	ldi	r20, 0x01	; 1
    38ec:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>

	///***************** _ Set Columns Pins Direction as input**********//
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col1_PIN, INPUT);  ///Set_Column_1_Pin_Value
    38f0:	84 e0       	ldi	r24, 0x04	; 4
    38f2:	62 e0       	ldi	r22, 0x02	; 2
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col2_PIN, INPUT);  ///Set_Column_2_Pin_Value
    38fa:	84 e0       	ldi	r24, 0x04	; 4
    38fc:	63 e0       	ldi	r22, 0x03	; 3
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col3_PIN, INPUT);  ///Set_Column_3_Pin_Value
    3904:	84 e0       	ldi	r24, 0x04	; 4
    3906:	64 e0       	ldi	r22, 0x04	; 4
    3908:	40 e0       	ldi	r20, 0x00	; 0
    390a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
	M_DIO_void_SetPinDirection(COLUMNS_PORT, Col4_PIN, INPUT);  ///Set_Column_4_Pin_Value
    390e:	84 e0       	ldi	r24, 0x04	; 4
    3910:	65 e0       	ldi	r22, 0x05	; 5
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>

	///***************** _ Set Row Pins Value to HIGH **********//
	M_DIO_void_SetPinValue(ROWS_PORT, Row1_PIN, HIGH);  ///Set_Row_1_Pin_Direction
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	41 e0       	ldi	r20, 0x01	; 1
    391e:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row2_PIN, HIGH);  ///Set_Row_2_Pin_Direction
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	41 e0       	ldi	r20, 0x01	; 1
    3928:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row3_PIN, HIGH);  ///Set_Row_3_Pin_Direction
    392c:	82 e0       	ldi	r24, 0x02	; 2
    392e:	62 e0       	ldi	r22, 0x02	; 2
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	M_DIO_void_SetPinValue(ROWS_PORT, Row4_PIN, HIGH);  ///Set_Row_4_Pin_Direction
    3936:	82 e0       	ldi	r24, 0x02	; 2
    3938:	63 e0       	ldi	r22, 0x03	; 3
    393a:	41 e0       	ldi	r20, 0x01	; 1
    393c:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>



}
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <H_KEYPAD_void_KeyPadRead>:
u8 H_KEYPAD_void_KeyPadRead(void)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
    394e:	a6 97       	sbiw	r28, 0x26	; 38
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
#if KEYPAD_MODEDL == MODEL_A

	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
    395a:	ce 01       	movw	r24, r28
    395c:	42 96       	adiw	r24, 0x12	; 18
    395e:	9b a3       	std	Y+35, r25	; 0x23
    3960:	8a a3       	std	Y+34, r24	; 0x22
    3962:	ea e8       	ldi	r30, 0x8A	; 138
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	fd a3       	std	Y+37, r31	; 0x25
    3968:	ec a3       	std	Y+36, r30	; 0x24
    396a:	f0 e1       	ldi	r31, 0x10	; 16
    396c:	fe a3       	std	Y+38, r31	; 0x26
    396e:	ec a1       	ldd	r30, Y+36	; 0x24
    3970:	fd a1       	ldd	r31, Y+37	; 0x25
    3972:	00 80       	ld	r0, Z
    3974:	8c a1       	ldd	r24, Y+36	; 0x24
    3976:	9d a1       	ldd	r25, Y+37	; 0x25
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	9d a3       	std	Y+37, r25	; 0x25
    397c:	8c a3       	std	Y+36, r24	; 0x24
    397e:	ea a1       	ldd	r30, Y+34	; 0x22
    3980:	fb a1       	ldd	r31, Y+35	; 0x23
    3982:	00 82       	st	Z, r0
    3984:	8a a1       	ldd	r24, Y+34	; 0x22
    3986:	9b a1       	ldd	r25, Y+35	; 0x23
    3988:	01 96       	adiw	r24, 0x01	; 1
    398a:	9b a3       	std	Y+35, r25	; 0x23
    398c:	8a a3       	std	Y+34, r24	; 0x22
    398e:	9e a1       	ldd	r25, Y+38	; 0x26
    3990:	91 50       	subi	r25, 0x01	; 1
    3992:	9e a3       	std	Y+38, r25	; 0x26
    3994:	ee a1       	ldd	r30, Y+38	; 0x26
    3996:	ee 23       	and	r30, r30
    3998:	51 f7       	brne	.-44     	; 0x396e <H_KEYPAD_void_KeyPadRead+0x28>
	u8 Local_u8_Arr [4][4]= {{'1','2','3','A'},
			                 {'4','5','6','B'},
							 {'7','8','9','C'},
							 {'*','0','#','D'}};
#endif
	u8 Local_u8_Col =0;            /// local columns counter
    399a:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8_Row =0;            /// local Rows counter
    399c:	18 8a       	std	Y+16, r1	; 0x10
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	8f 87       	std	Y+15, r24	; 0x0f

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    39a2:	18 8a       	std	Y+16, r1	; 0x10
    39a4:	ad c0       	rjmp	.+346    	; 0x3b00 <H_KEYPAD_void_KeyPadRead+0x1ba>
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
    39a6:	82 e0       	ldi	r24, 0x02	; 2
    39a8:	68 89       	ldd	r22, Y+16	; 0x10
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    39b0:	82 e0       	ldi	r24, 0x02	; 2
    39b2:	89 8b       	std	Y+17, r24	; 0x11
    39b4:	99 c0       	rjmp	.+306    	; 0x3ae8 <H_KEYPAD_void_KeyPadRead+0x1a2>
		{

		   ///**************Read_Local Column Pin value**********
		   /// ************** check if button is pressed********
		   if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    39b6:	84 e0       	ldi	r24, 0x04	; 4
    39b8:	69 89       	ldd	r22, Y+17	; 0x11
    39ba:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    39be:	88 23       	and	r24, r24
    39c0:	09 f0       	breq	.+2      	; 0x39c4 <H_KEYPAD_void_KeyPadRead+0x7e>
    39c2:	8f c0       	rjmp	.+286    	; 0x3ae2 <H_KEYPAD_void_KeyPadRead+0x19c>
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 ef       	ldi	r26, 0xF0	; 240
    39ca:	b2 e4       	ldi	r27, 0x42	; 66
    39cc:	8b 87       	std	Y+11, r24	; 0x0b
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	ad 87       	std	Y+13, r26	; 0x0d
    39d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a e7       	ldi	r20, 0x7A	; 122
    39e2:	53 e4       	ldi	r21, 0x43	; 67
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	8f 83       	std	Y+7, r24	; 0x07
    39ee:	98 87       	std	Y+8, r25	; 0x08
    39f0:	a9 87       	std	Y+9, r26	; 0x09
    39f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39f4:	6f 81       	ldd	r22, Y+7	; 0x07
    39f6:	78 85       	ldd	r23, Y+8	; 0x08
    39f8:	89 85       	ldd	r24, Y+9	; 0x09
    39fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	2c f4       	brge	.+10     	; 0x3a16 <H_KEYPAD_void_KeyPadRead+0xd0>
		__ticks = 1;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9e 83       	std	Y+6, r25	; 0x06
    3a12:	8d 83       	std	Y+5, r24	; 0x05
    3a14:	3f c0       	rjmp	.+126    	; 0x3a94 <H_KEYPAD_void_KeyPadRead+0x14e>
	else if (__tmp > 65535)
    3a16:	6f 81       	ldd	r22, Y+7	; 0x07
    3a18:	78 85       	ldd	r23, Y+8	; 0x08
    3a1a:	89 85       	ldd	r24, Y+9	; 0x09
    3a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	3f ef       	ldi	r19, 0xFF	; 255
    3a22:	4f e7       	ldi	r20, 0x7F	; 127
    3a24:	57 e4       	ldi	r21, 0x47	; 71
    3a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a2a:	18 16       	cp	r1, r24
    3a2c:	4c f5       	brge	.+82     	; 0x3a80 <H_KEYPAD_void_KeyPadRead+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4e:	dc 01       	movw	r26, r24
    3a50:	cb 01       	movw	r24, r22
    3a52:	9e 83       	std	Y+6, r25	; 0x06
    3a54:	8d 83       	std	Y+5, r24	; 0x05
    3a56:	0f c0       	rjmp	.+30     	; 0x3a76 <H_KEYPAD_void_KeyPadRead+0x130>
    3a58:	89 e1       	ldi	r24, 0x19	; 25
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9c 83       	std	Y+4, r25	; 0x04
    3a5e:	8b 83       	std	Y+3, r24	; 0x03
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <H_KEYPAD_void_KeyPadRead+0x11e>
    3a68:	9c 83       	std	Y+4, r25	; 0x04
    3a6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	00 97       	sbiw	r24, 0x00	; 0
    3a7c:	69 f7       	brne	.-38     	; 0x3a58 <H_KEYPAD_void_KeyPadRead+0x112>
    3a7e:	14 c0       	rjmp	.+40     	; 0x3aa8 <H_KEYPAD_void_KeyPadRead+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a80:	6f 81       	ldd	r22, Y+7	; 0x07
    3a82:	78 85       	ldd	r23, Y+8	; 0x08
    3a84:	89 85       	ldd	r24, Y+9	; 0x09
    3a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	9e 83       	std	Y+6, r25	; 0x06
    3a92:	8d 83       	std	Y+5, r24	; 0x05
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	9a 83       	std	Y+2, r25	; 0x02
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <H_KEYPAD_void_KeyPadRead+0x15a>
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
		   {   ////*******delay for DEBOUNCING
			   _delay_ms(KEYPAD_DEBOUNCING_TIME);
			   /// ************** check again if button is pressed********
			    if (M_DIO_U8_PinRead(COLUMNS_PORT, Local_u8_Col) == PRESSED)
    3aa8:	84 e0       	ldi	r24, 0x04	; 4
    3aaa:	69 89       	ldd	r22, Y+17	; 0x11
    3aac:	0e 94 ed 09 	call	0x13da	; 0x13da <M_DIO_U8_PinRead>
    3ab0:	88 23       	and	r24, r24
    3ab2:	b9 f4       	brne	.+46     	; 0x3ae2 <H_KEYPAD_void_KeyPadRead+0x19c>
		     	{
	            ///********if button is pressed set Local_u8_Read  ********
				  Local_u8_Read =Local_u8_Arr [Local_u8_Row][Local_u8_Col - 2] ;
    3ab4:	88 89       	ldd	r24, Y+16	; 0x10
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	89 89       	ldd	r24, Y+17	; 0x11
    3abc:	88 2f       	mov	r24, r24
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	ac 01       	movw	r20, r24
    3ac2:	42 50       	subi	r20, 0x02	; 2
    3ac4:	50 40       	sbci	r21, 0x00	; 0
    3ac6:	22 0f       	add	r18, r18
    3ac8:	33 1f       	adc	r19, r19
    3aca:	22 0f       	add	r18, r18
    3acc:	33 1f       	adc	r19, r19
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	82 0f       	add	r24, r18
    3ad4:	93 1f       	adc	r25, r19
    3ad6:	84 0f       	add	r24, r20
    3ad8:	95 1f       	adc	r25, r21
    3ada:	fc 01       	movw	r30, r24
    3adc:	71 96       	adiw	r30, 0x11	; 17
    3ade:	80 81       	ld	r24, Z
    3ae0:	8f 87       	std	Y+15, r24	; 0x0f
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
		///****set Local Row value to low***********/////
		M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, LOW);
	/////for loop to read the value of the four columns ////////
	for(Local_u8_Col = Col1_PIN ; Local_u8_Col <= Col4_PIN ; Local_u8_Col ++ )
    3ae2:	89 89       	ldd	r24, Y+17	; 0x11
    3ae4:	8f 5f       	subi	r24, 0xFF	; 255
    3ae6:	89 8b       	std	Y+17, r24	; 0x11
    3ae8:	89 89       	ldd	r24, Y+17	; 0x11
    3aea:	86 30       	cpi	r24, 0x06	; 6
    3aec:	08 f4       	brcc	.+2      	; 0x3af0 <H_KEYPAD_void_KeyPadRead+0x1aa>
    3aee:	63 cf       	rjmp	.-314    	; 0x39b6 <H_KEYPAD_void_KeyPadRead+0x70>

			    }
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
    3af0:	82 e0       	ldi	r24, 0x02	; 2
    3af2:	68 89       	ldd	r22, Y+16	; 0x10
    3af4:	41 e0       	ldi	r20, 0x01	; 1
    3af6:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
	u8 Local_u8_Row =0;            /// local Rows counter
    u8 Local_u8_Read = RELEASED;  /// local variable to read the button status

///NOTE: To use this code you have to connect columns & Rows sequential pins in the same port***//
	/////for loop to read the value of the four Rows ////////
	for (Local_u8_Row = Row1_PIN ; Local_u8_Row <= Row4_PIN ; Local_u8_Row++ ){
    3afa:	88 89       	ldd	r24, Y+16	; 0x10
    3afc:	8f 5f       	subi	r24, 0xFF	; 255
    3afe:	88 8b       	std	Y+16, r24	; 0x10
    3b00:	88 89       	ldd	r24, Y+16	; 0x10
    3b02:	84 30       	cpi	r24, 0x04	; 4
    3b04:	08 f4       	brcc	.+2      	; 0x3b08 <H_KEYPAD_void_KeyPadRead+0x1c2>
    3b06:	4f cf       	rjmp	.-354    	; 0x39a6 <H_KEYPAD_void_KeyPadRead+0x60>
		   }
		}
	            ///****set Local_u8_Row value to high ***********/////
			M_DIO_void_SetPinValue(ROWS_PORT, Local_u8_Row, HIGH);
	}
    return Local_u8_Read ;
    3b08:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3b0a:	a6 96       	adiw	r28, 0x26	; 38
    3b0c:	0f b6       	in	r0, 0x3f	; 63
    3b0e:	f8 94       	cli
    3b10:	de bf       	out	0x3e, r29	; 62
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	cd bf       	out	0x3d, r28	; 61
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <H_BUZ_Void_BUZint>:

///***************** Functions **********//

///  H_BUZ_Void_BUZint function to initialize  Buzzer
void H_BUZ_Void_BUZint(void)
{
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
   M_DIO_void_SetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
    3b24:	83 e0       	ldi	r24, 0x03	; 3
    3b26:	65 e0       	ldi	r22, 0x05	; 5
    3b28:	41 e0       	ldi	r20, 0x01	; 1
    3b2a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <M_DIO_void_SetPinDirection>
}
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <H_BUZ_Void_BUZSetON>:
void H_BUZ_Void_BUZSetON(void)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
    3b3c:	83 e0       	ldi	r24, 0x03	; 3
    3b3e:	65 e0       	ldi	r22, 0x05	; 5
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
}
    3b46:	cf 91       	pop	r28
    3b48:	df 91       	pop	r29
    3b4a:	08 95       	ret

00003b4c <H_BUZ_Void_BUZSetOFF>:
void H_BUZ_Void_BUZSetOFF(void)
{
    3b4c:	df 93       	push	r29
    3b4e:	cf 93       	push	r28
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
	M_DIO_void_SetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
    3b54:	83 e0       	ldi	r24, 0x03	; 3
    3b56:	65 e0       	ldi	r22, 0x05	; 5
    3b58:	40 e0       	ldi	r20, 0x00	; 0
    3b5a:	0e 94 65 08 	call	0x10ca	; 0x10ca <M_DIO_void_SetPinValue>
}
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <main>:
#include "main.h"      ///*** this is a header file to contain all includes of Application



int main ()
{
    3b64:	df 93       	push	r29
    3b66:	cf 93       	push	r28
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62

	    //// initialize blue led
	    H_LED_Void_LedInit(BLUE_LED);
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	0e 94 c2 12 	call	0x2584	; 0x2584 <H_LED_Void_LedInit>
	    //// CallBack function
	    M_TIMER0_void_Timer0SetCallBack(A_TIMER0_void_Timer0Exc);
    3b72:	8a ec       	ldi	r24, 0xCA	; 202
    3b74:	9d e1       	ldi	r25, 0x1D	; 29
    3b76:	0e 94 67 06 	call	0xcce	; 0xcce <M_TIMER0_void_Timer0SetCallBack>
	    //// Enabling the general interrupts
	    M_GIE_void_GIE_EN();
    3b7a:	0e 94 d6 06 	call	0xdac	; 0xdac <M_GIE_void_GIE_EN>
	    //// initialize blue led
        M_TIMER0_void_Timer0Int();
    3b7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <M_TIMER0_void_Timer0Int>
        /// function to set desired  time to the TIMER0
        M_TIMER0_U8_Timer0SetTime(500);   ///  desired time (500ms)
    3b82:	64 ef       	ldi	r22, 0xF4	; 244
    3b84:	71 e0       	ldi	r23, 0x01	; 1
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <M_TIMER0_U8_Timer0SetTime>
        //// function to start the TIMER0
        M_TIMER0_void_Timer0Start();
    3b8e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <M_TIMER0_void_Timer0Start>
    3b92:	ff cf       	rjmp	.-2      	; 0x3b92 <main+0x2e>

00003b94 <A_TIMER0_void_Timer0Exc>:

}

//// TIMER0 execution function
void A_TIMER0_void_Timer0Exc(void)
{
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
   ///Interrupt the CPU and  toggle the BLUE_LED
   H_LED_Void_LedTogg(BLUE_LED);
    3b9c:	82 e0       	ldi	r24, 0x02	; 2
    3b9e:	0e 94 8e 13 	call	0x271c	; 0x271c <H_LED_Void_LedTogg>
}
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	08 95       	ret

00003ba8 <__mulsi3>:
    3ba8:	62 9f       	mul	r22, r18
    3baa:	d0 01       	movw	r26, r0
    3bac:	73 9f       	mul	r23, r19
    3bae:	f0 01       	movw	r30, r0
    3bb0:	82 9f       	mul	r24, r18
    3bb2:	e0 0d       	add	r30, r0
    3bb4:	f1 1d       	adc	r31, r1
    3bb6:	64 9f       	mul	r22, r20
    3bb8:	e0 0d       	add	r30, r0
    3bba:	f1 1d       	adc	r31, r1
    3bbc:	92 9f       	mul	r25, r18
    3bbe:	f0 0d       	add	r31, r0
    3bc0:	83 9f       	mul	r24, r19
    3bc2:	f0 0d       	add	r31, r0
    3bc4:	74 9f       	mul	r23, r20
    3bc6:	f0 0d       	add	r31, r0
    3bc8:	65 9f       	mul	r22, r21
    3bca:	f0 0d       	add	r31, r0
    3bcc:	99 27       	eor	r25, r25
    3bce:	72 9f       	mul	r23, r18
    3bd0:	b0 0d       	add	r27, r0
    3bd2:	e1 1d       	adc	r30, r1
    3bd4:	f9 1f       	adc	r31, r25
    3bd6:	63 9f       	mul	r22, r19
    3bd8:	b0 0d       	add	r27, r0
    3bda:	e1 1d       	adc	r30, r1
    3bdc:	f9 1f       	adc	r31, r25
    3bde:	bd 01       	movw	r22, r26
    3be0:	cf 01       	movw	r24, r30
    3be2:	11 24       	eor	r1, r1
    3be4:	08 95       	ret

00003be6 <__udivmodqi4>:
    3be6:	99 1b       	sub	r25, r25
    3be8:	79 e0       	ldi	r23, 0x09	; 9
    3bea:	04 c0       	rjmp	.+8      	; 0x3bf4 <__udivmodqi4_ep>

00003bec <__udivmodqi4_loop>:
    3bec:	99 1f       	adc	r25, r25
    3bee:	96 17       	cp	r25, r22
    3bf0:	08 f0       	brcs	.+2      	; 0x3bf4 <__udivmodqi4_ep>
    3bf2:	96 1b       	sub	r25, r22

00003bf4 <__udivmodqi4_ep>:
    3bf4:	88 1f       	adc	r24, r24
    3bf6:	7a 95       	dec	r23
    3bf8:	c9 f7       	brne	.-14     	; 0x3bec <__udivmodqi4_loop>
    3bfa:	80 95       	com	r24
    3bfc:	08 95       	ret

00003bfe <__udivmodsi4>:
    3bfe:	a1 e2       	ldi	r26, 0x21	; 33
    3c00:	1a 2e       	mov	r1, r26
    3c02:	aa 1b       	sub	r26, r26
    3c04:	bb 1b       	sub	r27, r27
    3c06:	fd 01       	movw	r30, r26
    3c08:	0d c0       	rjmp	.+26     	; 0x3c24 <__udivmodsi4_ep>

00003c0a <__udivmodsi4_loop>:
    3c0a:	aa 1f       	adc	r26, r26
    3c0c:	bb 1f       	adc	r27, r27
    3c0e:	ee 1f       	adc	r30, r30
    3c10:	ff 1f       	adc	r31, r31
    3c12:	a2 17       	cp	r26, r18
    3c14:	b3 07       	cpc	r27, r19
    3c16:	e4 07       	cpc	r30, r20
    3c18:	f5 07       	cpc	r31, r21
    3c1a:	20 f0       	brcs	.+8      	; 0x3c24 <__udivmodsi4_ep>
    3c1c:	a2 1b       	sub	r26, r18
    3c1e:	b3 0b       	sbc	r27, r19
    3c20:	e4 0b       	sbc	r30, r20
    3c22:	f5 0b       	sbc	r31, r21

00003c24 <__udivmodsi4_ep>:
    3c24:	66 1f       	adc	r22, r22
    3c26:	77 1f       	adc	r23, r23
    3c28:	88 1f       	adc	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	1a 94       	dec	r1
    3c2e:	69 f7       	brne	.-38     	; 0x3c0a <__udivmodsi4_loop>
    3c30:	60 95       	com	r22
    3c32:	70 95       	com	r23
    3c34:	80 95       	com	r24
    3c36:	90 95       	com	r25
    3c38:	9b 01       	movw	r18, r22
    3c3a:	ac 01       	movw	r20, r24
    3c3c:	bd 01       	movw	r22, r26
    3c3e:	cf 01       	movw	r24, r30
    3c40:	08 95       	ret

00003c42 <__divmodsi4>:
    3c42:	97 fb       	bst	r25, 7
    3c44:	09 2e       	mov	r0, r25
    3c46:	05 26       	eor	r0, r21
    3c48:	0e d0       	rcall	.+28     	; 0x3c66 <__divmodsi4_neg1>
    3c4a:	57 fd       	sbrc	r21, 7
    3c4c:	04 d0       	rcall	.+8      	; 0x3c56 <__divmodsi4_neg2>
    3c4e:	d7 df       	rcall	.-82     	; 0x3bfe <__udivmodsi4>
    3c50:	0a d0       	rcall	.+20     	; 0x3c66 <__divmodsi4_neg1>
    3c52:	00 1c       	adc	r0, r0
    3c54:	38 f4       	brcc	.+14     	; 0x3c64 <__divmodsi4_exit>

00003c56 <__divmodsi4_neg2>:
    3c56:	50 95       	com	r21
    3c58:	40 95       	com	r20
    3c5a:	30 95       	com	r19
    3c5c:	21 95       	neg	r18
    3c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c60:	4f 4f       	sbci	r20, 0xFF	; 255
    3c62:	5f 4f       	sbci	r21, 0xFF	; 255

00003c64 <__divmodsi4_exit>:
    3c64:	08 95       	ret

00003c66 <__divmodsi4_neg1>:
    3c66:	f6 f7       	brtc	.-4      	; 0x3c64 <__divmodsi4_exit>
    3c68:	90 95       	com	r25
    3c6a:	80 95       	com	r24
    3c6c:	70 95       	com	r23
    3c6e:	61 95       	neg	r22
    3c70:	7f 4f       	sbci	r23, 0xFF	; 255
    3c72:	8f 4f       	sbci	r24, 0xFF	; 255
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	08 95       	ret

00003c78 <__prologue_saves__>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	ca 1b       	sub	r28, r26
    3ca2:	db 0b       	sbc	r29, r27
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	09 94       	ijmp

00003cb0 <__epilogue_restores__>:
    3cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    3cb2:	39 88       	ldd	r3, Y+17	; 0x11
    3cb4:	48 88       	ldd	r4, Y+16	; 0x10
    3cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cc6:	df 80       	ldd	r13, Y+7	; 0x07
    3cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cca:	fd 80       	ldd	r15, Y+5	; 0x05
    3ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cce:	1b 81       	ldd	r17, Y+3	; 0x03
    3cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cd4:	ce 0f       	add	r28, r30
    3cd6:	d1 1d       	adc	r29, r1
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	ed 01       	movw	r28, r26
    3ce4:	08 95       	ret

00003ce6 <_exit>:
    3ce6:	f8 94       	cli

00003ce8 <__stop_program>:
    3ce8:	ff cf       	rjmp	.-2      	; 0x3ce8 <__stop_program>
